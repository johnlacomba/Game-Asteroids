[{"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/index.js":"1","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/App.js":"2","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js":"3","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Asteroid.js":"4","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Player.js":"5","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Bullet.js":"6","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/inputController.js":"7","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/hooks/useGameLoop.js":"8","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/gameEngine.js":"9","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/collision.js":"10","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Debris.js":"11","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/UFO.js":"12"},{"size":218,"mtime":1756653164879,"results":"13","hashOfConfig":"14"},{"size":195,"mtime":1756658798015,"results":"15","hashOfConfig":"14"},{"size":9344,"mtime":1756661546513,"results":"16","hashOfConfig":"14"},{"size":2374,"mtime":1756658795949,"results":"17","hashOfConfig":"14"},{"size":3660,"mtime":1756661410116,"results":"18","hashOfConfig":"14"},{"size":1054,"mtime":1756661392859,"results":"19","hashOfConfig":"14"},{"size":640,"mtime":1756661416488,"results":"20","hashOfConfig":"14"},{"size":625,"mtime":1756653175834,"results":"21","hashOfConfig":"14"},{"size":859,"mtime":1756653181808,"results":"22","hashOfConfig":"14"},{"size":3079,"mtime":1756658793052,"results":"23","hashOfConfig":"14"},{"size":970,"mtime":1756661378916,"results":"24","hashOfConfig":"14"},{"size":3253,"mtime":1756660493920,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"90shuf",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/index.js",[],["56","57"],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/App.js",[],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js",["58","59"],"import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport UFO from './UFO';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const ufoBulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const ufoRef = useRef(null);\n  const playerRef = useRef(null);\n  const shootCooldownRef = useRef(0);\n  const waveCountRef = useRef(8);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const gameOverRef = useRef(false);\n  const scoreRef = useRef(0);\n  const ufoSpawnTimerRef = useRef(0);\n  const UFO_SPAWN_TIME = 30 * 60; // 30 seconds at 60fps\n  const SHOOT_COOLDOWN = 15; // 60fps / 4 shots per second = 15 frames\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: canvas.width / 2, y: canvas.height / 2 },\n    });\n    playerRef.current = player;\n\n    const spawnUFO = () => {\n      const side = Math.floor(Math.random() * 4);\n      let position, velocity;\n      const speed = 1.5;\n\n      switch (side) {\n        case 0: // Top\n          position = { x: Math.random() * canvas.width, y: -50 };\n          velocity = { x: Math.random() * 2 - 1, y: speed };\n          break;\n        case 1: // Right\n          position = { x: canvas.width + 50, y: Math.random() * canvas.height };\n          velocity = { x: -speed, y: Math.random() * 2 - 1 };\n          break;\n        case 2: // Bottom\n          position = { x: Math.random() * canvas.width, y: canvas.height + 50 };\n          velocity = { x: Math.random() * 2 - 1, y: -speed };\n          break;\n        case 3: // Left\n        default:\n          position = { x: -50, y: Math.random() * canvas.height };\n          velocity = { x: speed, y: Math.random() * 2 - 1 };\n          break;\n      }\n      ufoRef.current = new UFO({ position, velocity });\n    };\n\n    const spawnAsteroids = (count) => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n          };\n  \n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n  \n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOverRef.current) {\n        if (shootCooldownRef.current > 0) {\n          shootCooldownRef.current--;\n        }\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && shootCooldownRef.current <= 0) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          shootCooldownRef.current = SHOOT_COOLDOWN;\n        }\n        // Update player\n        currentPlayer.update(keys, canvas.width, canvas.height);\n      }\n\n      // UFO Spawn Logic\n      if (!gameOverRef.current) {\n        ufoSpawnTimerRef.current++;\n        if (!ufoRef.current && ufoSpawnTimerRef.current > UFO_SPAWN_TIME) {\n          spawnUFO();\n          ufoSpawnTimerRef.current = 0;\n        }\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw UFO\n      if (ufoRef.current) {\n        const newUfoBullets = ufoRef.current.update(canvas.width, canvas.height, currentPlayer.position);\n        ufoBulletsRef.current.push(...newUfoBullets);\n\n        ufoRef.current.draw(context);\n        if (ufoRef.current.delete) {\n          ufoRef.current = null;\n        }\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      ufoBulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      ufoBulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Bullets with UFO\n      if (ufoRef.current) {\n        const ufoPolygon = ufoRef.current.getPolygon();\n        bulletsRef.current.forEach(bullet => {\n          if (!bullet.delete && checkCirclePolygonCollision(bullet, ufoPolygon)) {\n            bullet.delete = true;\n            ufoRef.current.destroy();\n            scoreRef.current += 500; // UFO is worth more points\n          }\n        });\n      }\n\n      // Collision Detection: UFO Bullets with Player\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        ufoBulletsRef.current.forEach(bullet => {\n          if (checkCirclePolygonCollision(bullet, playerPolygon)) {\n            bullet.delete = true;\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with UFO\n      if (!gameOverRef.current && ufoRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        const ufoPolygon = ufoRef.current.getPolygon();\n        if (checkPolygonCollision(playerPolygon, ufoPolygon)) {\n          debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n          gameOverRef.current = true;\n          setIsGameOver(true);\n          ufoRef.current.destroy(); // Also destroy the UFO\n        }\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      ufoBulletsRef.current = ufoBulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOverRef.current && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <>\n      {isGameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Asteroid.js",["60"],"import React from 'react';\n\nexport default class Asteroid {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = {\n      x: Math.random() * 2 - 1,\n      y: Math.random() * 2 - 1,\n    };\n    this.rotation = 0;\n    this.rotationSpeed = Math.random() * 0.5 - 0.25;\n    this.radius = args.size || 50;\n    this.hitPoints = Math.floor(this.radius / 12) + 1; // ~5 hits for default size\n    this.delete = false;\n\n    // Generate a misshapen polygon shape\n    this.shape = [];\n    const sides = Math.floor(Math.random() * 5) + 7; // 7 to 11 sides\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * 2 * Math.PI;\n      const distance = this.radius * (0.8 + Math.random() * 0.4);\n      this.shape.push({\n        x: Math.cos(angle) * distance,\n        y: Math.sin(angle) * distance,\n      });\n    }\n  }\n\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y,\n      };\n    });\n  }\n\n  destroy() {\n    this.delete = true;\n  }\n\n  hit() {\n    this.hitPoints--;\n    if (this.hitPoints <= 0) {\n      this.destroy();\n    }\n  }\n\n  update(width, height) {\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n    this.rotation += this.rotationSpeed;\n\n    // Screen wrap\n    if (this.position.x > width + this.radius) {\n      this.position.x = -this.radius;\n    } else if (this.position.x < -this.radius) {\n      this.position.x = width + this.radius;\n    }\n    if (this.position.y > height + this.radius) {\n      this.position.y = -this.radius;\n    } else if (this.position.y < -this.radius) {\n      this.position.y = height + this.radius;\n    }\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(this.shape[0].x, this.shape[0].y);\n    for (let i = 1; i < this.shape.length; i++) {\n      context.lineTo(this.shape[i].x, this.shape[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Player.js",["61","62","63","64","65"],"import React, { useEffect, useRef } from 'react';\nimport { useGameLoop } from '../hooks/useGameLoop';\nimport { handleInput } from '../core/inputController';\nimport Bullet from './Bullet';\nimport Debris from './Debris';\n\nexport default class Player {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = { x: 0, y: 0 };\n    this.rotation = 0;\n    this.rotationSpeed = 6;\n    this.speed = 0.15;\n    this.inertia = 0.99;\n    this.radius = 16; // Was 20\n    this.shape = [\n      { x: 0, y: -this.radius },\n      { x: this.radius / 2, y: this.radius / 2 },\n      { x: -this.radius / 2, y: this.radius / 2 },\n    ];\n    this.delete = false;\n  }\n\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y,\n      };\n    });\n  }\n\n  destroy() {\n    this.delete = true;\n    const debris = [];\n    // Create debris from the ship's lines\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[0], this.shape[1]] }));\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[1], this.shape[2]] }));\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[2], this.shape[0]] }));\n    return debris;\n  }\n\n  shoot() {\n    const bulletPosition = {\n      x: this.position.x - Math.sin(-this.rotation * Math.PI / 180) * this.radius,\n      y: this.position.y - Math.cos(-this.rotation * Math.PI / 180) * this.radius,\n    };\n    return new Bullet({ position: bulletPosition, rotation: this.rotation });\n  }\n\n  rotate(dir) {\n    if (dir === 'LEFT') {\n      this.rotation -= this.rotationSpeed;\n    }\n    if (dir === 'RIGHT') {\n      this.rotation += this.rotationSpeed;\n    }\n  }\n\n  accelerate() {\n    this.velocity.x -= Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n    this.velocity.y -= Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n  }\n\n  decelerate() {\n    this.velocity.x += Math.sin(-this.rotation * Math.PI / 180) * (this.speed / 2);\n    this.velocity.y += Math.cos(-this.rotation * Math.PI / 180) * (this.speed / 2);\n  }\n\n  update(keys, width, height) {\n    if (keys.a) {\n      this.rotate('LEFT');\n    }\n    if (keys.d) {\n      this.rotate('RIGHT');\n    }\n    if (keys.w) {\n      this.accelerate();\n    }\n    if (keys.s) {\n      this.decelerate();\n    }\n\n    // Apply inertia\n    this.velocity.x *= this.inertia;\n    this.velocity.y *= this.inertia;\n\n    // Update position\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Screen wrap\n    if (this.position.x > width + this.radius) {\n      this.position.x = -this.radius;\n    } else if (this.position.x < -this.radius) {\n      this.position.x = width + this.radius;\n    }\n    if (this.position.y > height + this.radius) {\n      this.position.y = -this.radius;\n    } else if (this.position.y < -this.radius) {\n      this.position.y = height + this.radius;\n    }\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.fillStyle = '#000000';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(0, -this.radius);\n    context.lineTo(this.radius / 2, this.radius / 2);\n    context.lineTo(-this.radius / 2, this.radius / 2);\n    context.closePath();\n    context.fill();\n    context.stroke();\n    context.restore();\n  }\n}","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Bullet.js",["66"],"import React from 'react';\n\nexport default class Bullet {\n  constructor(args) {\n    this.position = args.position;\n    this.owner = args.owner || 'player'; // 'player' or 'ufo'\n\n    if (args.velocity) {\n      this.velocity = args.velocity;\n    } else {\n      const speed = 5;\n      this.velocity = {\n        x: -Math.sin(-args.rotation * Math.PI / 180) * speed,\n        y: -Math.cos(-args.rotation * Math.PI / 180) * speed\n      };\n    }\n    this.radius = 2;\n    this.delete = false; // Flag for removal\n  }\n\n  update(width, height) {\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Check if bullet is off-screen\n    if (this.position.x < 0 || this.position.x > width || this.position.y < 0 || this.position.y > height) {\n      this.delete = true;\n    }\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.fillStyle = '#ffffff';\n    context.beginPath();\n    context.arc(0, 0, this.radius, 0, 2 * Math.PI);\n    context.fill();\n    context.restore();\n  }\n}","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/inputController.js",[],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/hooks/useGameLoop.js",["67"],"import { useEffect, useRef } from 'react';\n\nconst useGameLoop = (callback) => {\n    const requestRef = useRef();\n    const previousTimeRef = useRef();\n\n    const loop = (time) => {\n        if (previousTimeRef.current != null) {\n            const deltaTime = time - previousTimeRef.current;\n            callback(deltaTime);\n        }\n        previousTimeRef.current = time;\n        requestRef.current = requestAnimationFrame(loop);\n    };\n\n    useEffect(() => {\n        requestRef.current = requestAnimationFrame(loop);\n        return () => cancelAnimationFrame(requestRef.current);\n    }, []);\n};\n\nexport default useGameLoop;","/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/gameEngine.js",["68","69","70","71","72","73"],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/collision.js",[],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Debris.js",[],"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/UFO.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":14},{"ruleId":"82","severity":1,"message":"83","line":260,"column":6,"nodeType":"84","endLine":260,"endColumn":8,"suggestions":"85"},{"ruleId":"78","severity":1,"message":"86","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"86","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"87","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"88","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":34},{"ruleId":"78","severity":1,"message":"89","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":21},{"ruleId":"78","severity":1,"message":"90","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":21},{"ruleId":"78","severity":1,"message":"86","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"91","line":19,"column":8,"nodeType":"84","endLine":19,"endColumn":10,"suggestions":"92"},{"ruleId":"78","severity":1,"message":"93","line":5,"column":12,"nodeType":"80","messageId":"81","endLine":5,"endColumn":18},{"ruleId":"78","severity":1,"message":"94","line":5,"column":20,"nodeType":"80","messageId":"81","endLine":5,"endColumn":29},{"ruleId":"78","severity":1,"message":"95","line":6,"column":12,"nodeType":"80","messageId":"81","endLine":6,"endColumn":21},{"ruleId":"78","severity":1,"message":"96","line":7,"column":19,"nodeType":"80","messageId":"81","endLine":7,"endColumn":27},{"ruleId":"78","severity":1,"message":"97","line":14,"column":11,"nodeType":"80","messageId":"81","endLine":14,"endColumn":21},{"ruleId":"78","severity":1,"message":"98","line":19,"column":11,"nodeType":"80","messageId":"81","endLine":19,"endColumn":26},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Debris' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UFO_SPAWN_TIME'. Either include it or remove the dependency array.","ArrayExpression",["101"],"'React' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useGameLoop' is defined but never used.","'handleInput' is defined but never used.","React Hook useEffect has a missing dependency: 'loop'. Either include it or remove the dependency array.",["102"],"'player' is assigned a value but never used.","'setPlayer' is assigned a value but never used.","'asteroids' is assigned a value but never used.","'setScore' is assigned a value but never used.","'updateGame' is assigned a value but never used.","'handleCollision' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [UFO_SPAWN_TIME]",{"range":"107","text":"108"},"Update the dependencies array to be: [loop]",{"range":"109","text":"110"},[9020,9022],"[UFO_SPAWN_TIME]",[589,591],"[loop]"]