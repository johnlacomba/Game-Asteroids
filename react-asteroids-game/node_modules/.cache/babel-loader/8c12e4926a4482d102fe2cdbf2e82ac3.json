{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const waveCountRef = useRef(8); // Start with 8 asteroids\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      }\n    });\n    playerRef.current = player;\n    const spawnAsteroids = count => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height\n          };\n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n    let animationFrameId;\n    const gameLoop = () => {\n      if (!playerRef.current || playerRef.current.delete) {\n        setGameOver(true);\n        window.cancelAnimationFrame(animationFrameId);\n        return;\n      }\n      const keys = handleInput();\n      const currentPlayer = playerRef.current;\n\n      // Handle shooting\n      if (keys[' '] && canShootRef.current) {\n        bulletsRef.current.push(currentPlayer.shoot());\n        canShootRef.current = false;\n      }\n      if (!keys[' ']) {\n        canShootRef.current = true;\n      }\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${score}`, 20, 20);\n\n      // Update and draw player\n      currentPlayer.update(keys, canvas.width, canvas.height);\n      currentPlayer.draw(context);\n\n      // Update and draw asteroids\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      // Update and draw bullets\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              setScore(prevScore => prevScore + 100);\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids\n      const playerPolygon = currentPlayer.getPolygon();\n      asteroidsRef.current.forEach(asteroid => {\n        if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n          currentPlayer.destroy();\n        }\n      });\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave\n      if (asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '48px',\n        textAlign: 'center'\n      },\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"pKzi5J1A+OBhvm3qrBF4SnTblPk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Player","Asteroid","handleInput","checkPolygonCollision","checkCirclePolygonCollision","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","bulletsRef","asteroidsRef","playerRef","canShootRef","waveCountRef","gameOver","setGameOver","score","setScore","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","player","position","x","y","spawnAsteroids","count","safeRadius","i","asteroidPosition","isSafe","Math","random","dx","dy","distance","sqrt","push","animationFrameId","gameLoop","delete","cancelAnimationFrame","keys","currentPlayer","shoot","fillStyle","fillRect","font","textAlign","textBaseline","fillText","update","draw","forEach","asteroid","bullet","getPolygon","hitPoints","prevScore","hit","playerPolygon","destroy","newAsteroids","radius","size","filter","b","a","concat","length","requestAnimationFrame","children","style","top","left","transform","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const waveCountRef = useRef(8); // Start with 8 asteroids\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: canvas.width / 2, y: canvas.height / 2 },\n    });\n    playerRef.current = player;\n\n    const spawnAsteroids = (count) => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n          };\n  \n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n  \n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      if (!playerRef.current || playerRef.current.delete) {\n        setGameOver(true);\n        window.cancelAnimationFrame(animationFrameId);\n        return;\n      }\n\n      const keys = handleInput();\n      const currentPlayer = playerRef.current;\n\n      // Handle shooting\n      if (keys[' '] && canShootRef.current) {\n        bulletsRef.current.push(currentPlayer.shoot());\n        canShootRef.current = false;\n      }\n      if (!keys[' ']) {\n        canShootRef.current = true;\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${score}`, 20, 20);\n\n      // Update and draw player\n      currentPlayer.update(keys, canvas.width, canvas.height);\n      currentPlayer.draw(context);\n\n      // Update and draw asteroids\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      // Update and draw bullets\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              setScore(prevScore => prevScore + 100);\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids\n      const playerPolygon = currentPlayer.getPolygon();\n      asteroidsRef.current.forEach(asteroid => {\n        if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n          currentPlayer.destroy();\n        }\n      });\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave\n      if (asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <>\n      {gameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}