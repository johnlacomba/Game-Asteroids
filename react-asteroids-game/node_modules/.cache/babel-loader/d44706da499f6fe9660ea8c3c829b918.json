{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { handleInput } from '../core/inputController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Player {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.angle = -Math.PI / 2; // Point up\n    this.rotation = 0;\n    this.speed = {\n      x: 0,\n      y: 0\n    };\n    this.radius = 15;\n    this.color = 'white';\n    this.rotationSpeed = 0.05;\n    this.acceleration = 0.1;\n    this.friction = 0.99;\n  }\n  update(keys) {\n    // Handle rotation\n    if (keys.a) this.angle -= this.rotationSpeed; // Left\n    if (keys.d) this.angle += this.rotationSpeed; // Right\n\n    // Handle forward/backward movement\n    if (keys.w) {\n      this.speed.x += Math.cos(this.angle) * this.acceleration;\n      this.speed.y += Math.sin(this.angle) * this.acceleration;\n    }\n    if (keys.s) {\n      this.speed.x -= Math.cos(this.angle) * this.acceleration * 0.5;\n      this.speed.y -= Math.sin(this.angle) * this.acceleration * 0.5;\n    }\n\n    // Apply friction\n    this.speed.x *= this.friction;\n    this.speed.y *= this.friction;\n\n    // Update position\n    this.x += this.speed.x;\n    this.y += this.speed.y;\n  }\n  draw(context) {\n    context.save();\n    context.translate(this.x, this.y);\n    context.rotate(this.angle);\n    context.beginPath();\n    context.moveTo(this.radius, 0);\n    context.lineTo(-this.radius / 2, -this.radius / 2);\n    context.lineTo(-this.radius / 2, this.radius / 2);\n    context.closePath();\n    context.strokeStyle = this.color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.restore();\n  }\n}\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let animationFrameId;\n    const player = new Player(canvas.width / 2, canvas.height / 2);\n    const gameLoop = () => {\n      const keys = handleInput();\n      // console.log(keys); // You can uncomment this to test keyboard input in the browser console\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      player.update(keys);\n      player.draw(context);\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      // You might want to remove event listeners here in a more complex app\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n_s(Game, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","handleInput","jsxDEV","_jsxDEV","Player","constructor","x","y","angle","Math","PI","rotation","speed","radius","color","rotationSpeed","acceleration","friction","update","keys","a","d","w","cos","sin","s","draw","context","save","translate","rotate","beginPath","moveTo","lineTo","closePath","strokeStyle","lineWidth","stroke","restore","Game","_s","canvasRef","canvas","current","getContext","width","window","innerWidth","height","innerHeight","animationFrameId","player","gameLoop","fillStyle","fillRect","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { handleInput } from '../core/inputController';\n\nclass Player {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.angle = -Math.PI / 2; // Point up\n    this.rotation = 0;\n    this.speed = { x: 0, y: 0 };\n    this.radius = 15;\n    this.color = 'white';\n    this.rotationSpeed = 0.05;\n    this.acceleration = 0.1;\n    this.friction = 0.99;\n  }\n\n  update(keys) {\n    // Handle rotation\n    if (keys.a) this.angle -= this.rotationSpeed; // Left\n    if (keys.d) this.angle += this.rotationSpeed; // Right\n\n    // Handle forward/backward movement\n    if (keys.w) {\n      this.speed.x += Math.cos(this.angle) * this.acceleration;\n      this.speed.y += Math.sin(this.angle) * this.acceleration;\n    }\n    if (keys.s) {\n      this.speed.x -= Math.cos(this.angle) * this.acceleration * 0.5;\n      this.speed.y -= Math.sin(this.angle) * this.acceleration * 0.5;\n    }\n\n    // Apply friction\n    this.speed.x *= this.friction;\n    this.speed.y *= this.friction;\n\n    // Update position\n    this.x += this.speed.x;\n    this.y += this.speed.y;\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.x, this.y);\n    context.rotate(this.angle);\n    context.beginPath();\n    context.moveTo(this.radius, 0);\n    context.lineTo(-this.radius / 2, -this.radius / 2);\n    context.lineTo(-this.radius / 2, this.radius / 2);\n    context.closePath();\n    context.strokeStyle = this.color;\n    context.lineWidth = 2;\n    context.stroke();\n    context.restore();\n  }\n}\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    let animationFrameId;\n\n    const player = new Player(canvas.width / 2, canvas.height / 2);\n\n    const gameLoop = () => {\n      const keys = handleInput();\n      // console.log(keys); // You can uncomment this to test keyboard input in the browser console\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      player.update(keys);\n      player.draw(context);\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      // You might want to remove event listeners here in a more complex app\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}