{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { useGameLoop } from '../hooks/useGameLoop';\nimport { handleInput } from '../core/inputController';\nimport Bullet from './Bullet';\nimport Debris from './Debris';\nexport default class Player {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.rotation = 0;\n    this.rotationSpeed = 6;\n    this.speed = 0.15;\n    this.inertia = 0.99;\n    this.radius = 16; // Was 20\n    this.shape = [{\n      x: 0,\n      y: -this.radius\n    }, {\n      x: this.radius / 2,\n      y: this.radius / 2\n    }, {\n      x: -this.radius / 2,\n      y: this.radius / 2\n    }];\n    this.delete = false;\n  }\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y\n      };\n    });\n  }\n  destroy() {\n    this.delete = true;\n    const debris = [];\n    // Create debris from the ship's lines\n    debris.push(new Debris({\n      position: {\n        ...this.position\n      },\n      shape: [this.shape[0], this.shape[1]]\n    }));\n    debris.push(new Debris({\n      position: {\n        ...this.position\n      },\n      shape: [this.shape[1], this.shape[2]]\n    }));\n    debris.push(new Debris({\n      position: {\n        ...this.position\n      },\n      shape: [this.shape[2], this.shape[0]]\n    }));\n    return debris;\n  }\n  rotate(dir) {\n    // This method is no longer used for aiming but can be kept for other purposes if needed.\n    if (dir === 'LEFT') {\n      this.rotation -= this.rotationSpeed;\n    }\n    if (dir === 'RIGHT') {\n      this.rotation += this.rotationSpeed;\n    }\n  }\n  accelerate() {\n    this.velocity.x -= Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n    this.velocity.y -= Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n  }\n  decelerate() {\n    this.velocity.x += Math.sin(-this.rotation * Math.PI / 180) * (this.speed / 2);\n    this.velocity.y += Math.cos(-this.rotation * Math.PI / 180) * (this.speed / 2);\n  }\n  update(keys, width, height, mouse) {\n    // Aim at mouse\n    const dx = mouse.x - this.position.x;\n    const dy = mouse.y - this.position.y;\n    // Add 90 degrees because the ship sprite points \"up\" (0, -1)\n    this.rotation = Math.atan2(dy, dx) * 180 / Math.PI + 90;\n    if (keys.w) {\n      this.accelerate();\n    }\n    if (keys.s) {\n      this.decelerate();\n    }\n\n    // Apply inertia\n    this.velocity.x *= this.inertia;\n    this.velocity.y *= this.inertia;\n\n    // Update position\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Screen wrap\n    if (this.position.x > width + this.radius) {\n      this.position.x = -this.radius;\n    } else if (this.position.x < -this.radius) {\n      this.position.x = width + this.radius;\n    }\n    if (this.position.y > height + this.radius) {\n      this.position.y = -this.radius;\n    } else if (this.position.y < -this.radius) {\n      this.position.y = height + this.radius;\n    }\n  }\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.fillStyle = '#000000';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(0, -this.radius);\n    context.lineTo(this.radius / 2, this.radius / 2);\n    context.lineTo(-this.radius / 2, this.radius / 2);\n    context.closePath();\n    context.fill();\n    context.stroke();\n    context.restore();\n  }\n}","map":{"version":3,"names":["React","useEffect","useRef","useGameLoop","handleInput","Bullet","Debris","Player","constructor","args","position","velocity","x","y","rotation","rotationSpeed","speed","inertia","radius","shape","delete","getPolygon","angle","Math","PI","map","point","rotatedX","cos","sin","rotatedY","destroy","debris","push","rotate","dir","accelerate","decelerate","update","keys","width","height","mouse","dx","dy","atan2","w","s","draw","context","save","translate","strokeStyle","fillStyle","lineWidth","beginPath","moveTo","lineTo","closePath","fill","stroke","restore"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Player.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useGameLoop } from '../hooks/useGameLoop';\nimport { handleInput } from '../core/inputController';\nimport Bullet from './Bullet';\nimport Debris from './Debris';\n\nexport default class Player {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = { x: 0, y: 0 };\n    this.rotation = 0;\n    this.rotationSpeed = 6;\n    this.speed = 0.15;\n    this.inertia = 0.99;\n    this.radius = 16; // Was 20\n    this.shape = [\n      { x: 0, y: -this.radius },\n      { x: this.radius / 2, y: this.radius / 2 },\n      { x: -this.radius / 2, y: this.radius / 2 },\n    ];\n    this.delete = false;\n  }\n\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y,\n      };\n    });\n  }\n\n  destroy() {\n    this.delete = true;\n    const debris = [];\n    // Create debris from the ship's lines\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[0], this.shape[1]] }));\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[1], this.shape[2]] }));\n    debris.push(new Debris({ position: { ...this.position }, shape: [this.shape[2], this.shape[0]] }));\n    return debris;\n  }\n\n  rotate(dir) {\n    // This method is no longer used for aiming but can be kept for other purposes if needed.\n    if (dir === 'LEFT') {\n      this.rotation -= this.rotationSpeed;\n    }\n    if (dir === 'RIGHT') {\n      this.rotation += this.rotationSpeed;\n    }\n  }\n\n  accelerate() {\n    this.velocity.x -= Math.sin(-this.rotation * Math.PI / 180) * this.speed;\n    this.velocity.y -= Math.cos(-this.rotation * Math.PI / 180) * this.speed;\n  }\n\n  decelerate() {\n    this.velocity.x += Math.sin(-this.rotation * Math.PI / 180) * (this.speed / 2);\n    this.velocity.y += Math.cos(-this.rotation * Math.PI / 180) * (this.speed / 2);\n  }\n\n  update(keys, width, height, mouse) {\n    // Aim at mouse\n    const dx = mouse.x - this.position.x;\n    const dy = mouse.y - this.position.y;\n    // Add 90 degrees because the ship sprite points \"up\" (0, -1)\n    this.rotation = (Math.atan2(dy, dx) * 180 / Math.PI) + 90;\n\n    if (keys.w) {\n      this.accelerate();\n    }\n    if (keys.s) {\n      this.decelerate();\n    }\n\n    // Apply inertia\n    this.velocity.x *= this.inertia;\n    this.velocity.y *= this.inertia;\n\n    // Update position\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Screen wrap\n    if (this.position.x > width + this.radius) {\n      this.position.x = -this.radius;\n    } else if (this.position.x < -this.radius) {\n      this.position.x = width + this.radius;\n    }\n    if (this.position.y > height + this.radius) {\n      this.position.y = -this.radius;\n    } else if (this.position.y < -this.radius) {\n      this.position.y = height + this.radius;\n    }\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.fillStyle = '#000000';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(0, -this.radius);\n    context.lineTo(this.radius / 2, this.radius / 2);\n    context.lineTo(-this.radius / 2, this.radius / 2);\n    context.closePath();\n    context.fill();\n    context.stroke();\n    context.restore();\n  }\n}"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAE7B,eAAe,MAAMC,MAAM,CAAC;EAC1BC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC7B,IAAI,CAACC,QAAQ,GAAG;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAC9B,IAAI,CAACC,QAAQ,GAAG,CAAC;IACjB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC;IAClB,IAAI,CAACC,KAAK,GAAG,CACX;MAAEP,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC,IAAI,CAACK;IAAO,CAAC,EACzB;MAAEN,CAAC,EAAE,IAAI,CAACM,MAAM,GAAG,CAAC;MAAEL,CAAC,EAAE,IAAI,CAACK,MAAM,GAAG;IAAE,CAAC,EAC1C;MAAEN,CAAC,EAAE,CAAC,IAAI,CAACM,MAAM,GAAG,CAAC;MAAEL,CAAC,EAAE,IAAI,CAACK,MAAM,GAAG;IAAE,CAAC,CAC5C;IACD,IAAI,CAACE,MAAM,GAAG,KAAK;EACrB;EAEAC,UAAUA,CAAA,EAAG;IACX,MAAMC,KAAK,GAAG,IAAI,CAACR,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG;IAC3C,OAAO,IAAI,CAACL,KAAK,CAACM,GAAG,CAACC,KAAK,IAAI;MAC7B,MAAMC,QAAQ,GAAGD,KAAK,CAACd,CAAC,GAAGW,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC,GAAGI,KAAK,CAACb,CAAC,GAAGU,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC;MACtE,MAAMQ,QAAQ,GAAGJ,KAAK,CAACd,CAAC,GAAGW,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC,GAAGI,KAAK,CAACb,CAAC,GAAGU,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC;MACtE,OAAO;QACLV,CAAC,EAAEe,QAAQ,GAAG,IAAI,CAACjB,QAAQ,CAACE,CAAC;QAC7BC,CAAC,EAAEiB,QAAQ,GAAG,IAAI,CAACpB,QAAQ,CAACG;MAC9B,CAAC;IACH,CAAC,CAAC;EACJ;EAEAkB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACX,MAAM,GAAG,IAAI;IAClB,MAAMY,MAAM,GAAG,EAAE;IACjB;IACAA,MAAM,CAACC,IAAI,CAAC,IAAI3B,MAAM,CAAC;MAAEI,QAAQ,EAAE;QAAE,GAAG,IAAI,CAACA;MAAS,CAAC;MAAES,KAAK,EAAE,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;IAClGa,MAAM,CAACC,IAAI,CAAC,IAAI3B,MAAM,CAAC;MAAEI,QAAQ,EAAE;QAAE,GAAG,IAAI,CAACA;MAAS,CAAC;MAAES,KAAK,EAAE,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;IAClGa,MAAM,CAACC,IAAI,CAAC,IAAI3B,MAAM,CAAC;MAAEI,QAAQ,EAAE;QAAE,GAAG,IAAI,CAACA;MAAS,CAAC;MAAES,KAAK,EAAE,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;IAClG,OAAOa,MAAM;EACf;EAEAE,MAAMA,CAACC,GAAG,EAAE;IACV;IACA,IAAIA,GAAG,KAAK,MAAM,EAAE;MAClB,IAAI,CAACrB,QAAQ,IAAI,IAAI,CAACC,aAAa;IACrC;IACA,IAAIoB,GAAG,KAAK,OAAO,EAAE;MACnB,IAAI,CAACrB,QAAQ,IAAI,IAAI,CAACC,aAAa;IACrC;EACF;EAEAqB,UAAUA,CAAA,EAAG;IACX,IAAI,CAACzB,QAAQ,CAACC,CAAC,IAAIW,IAAI,CAACM,GAAG,CAAC,CAAC,IAAI,CAACf,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,GAAG,IAAI,CAACR,KAAK;IACxE,IAAI,CAACL,QAAQ,CAACE,CAAC,IAAIU,IAAI,CAACK,GAAG,CAAC,CAAC,IAAI,CAACd,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,GAAG,IAAI,CAACR,KAAK;EAC1E;EAEAqB,UAAUA,CAAA,EAAG;IACX,IAAI,CAAC1B,QAAQ,CAACC,CAAC,IAAIW,IAAI,CAACM,GAAG,CAAC,CAAC,IAAI,CAACf,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,IAAI,IAAI,CAACR,KAAK,GAAG,CAAC,CAAC;IAC9E,IAAI,CAACL,QAAQ,CAACE,CAAC,IAAIU,IAAI,CAACK,GAAG,CAAC,CAAC,IAAI,CAACd,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC,IAAI,IAAI,CAACR,KAAK,GAAG,CAAC,CAAC;EAChF;EAEAsB,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;IACjC;IACA,MAAMC,EAAE,GAAGD,KAAK,CAAC9B,CAAC,GAAG,IAAI,CAACF,QAAQ,CAACE,CAAC;IACpC,MAAMgC,EAAE,GAAGF,KAAK,CAAC7B,CAAC,GAAG,IAAI,CAACH,QAAQ,CAACG,CAAC;IACpC;IACA,IAAI,CAACC,QAAQ,GAAIS,IAAI,CAACsB,KAAK,CAACD,EAAE,EAAED,EAAE,CAAC,GAAG,GAAG,GAAGpB,IAAI,CAACC,EAAE,GAAI,EAAE;IAEzD,IAAIe,IAAI,CAACO,CAAC,EAAE;MACV,IAAI,CAACV,UAAU,CAAC,CAAC;IACnB;IACA,IAAIG,IAAI,CAACQ,CAAC,EAAE;MACV,IAAI,CAACV,UAAU,CAAC,CAAC;IACnB;;IAEA;IACA,IAAI,CAAC1B,QAAQ,CAACC,CAAC,IAAI,IAAI,CAACK,OAAO;IAC/B,IAAI,CAACN,QAAQ,CAACE,CAAC,IAAI,IAAI,CAACI,OAAO;;IAE/B;IACA,IAAI,CAACP,QAAQ,CAACE,CAAC,IAAI,IAAI,CAACD,QAAQ,CAACC,CAAC;IAClC,IAAI,CAACF,QAAQ,CAACG,CAAC,IAAI,IAAI,CAACF,QAAQ,CAACE,CAAC;;IAElC;IACA,IAAI,IAAI,CAACH,QAAQ,CAACE,CAAC,GAAG4B,KAAK,GAAG,IAAI,CAACtB,MAAM,EAAE;MACzC,IAAI,CAACR,QAAQ,CAACE,CAAC,GAAG,CAAC,IAAI,CAACM,MAAM;IAChC,CAAC,MAAM,IAAI,IAAI,CAACR,QAAQ,CAACE,CAAC,GAAG,CAAC,IAAI,CAACM,MAAM,EAAE;MACzC,IAAI,CAACR,QAAQ,CAACE,CAAC,GAAG4B,KAAK,GAAG,IAAI,CAACtB,MAAM;IACvC;IACA,IAAI,IAAI,CAACR,QAAQ,CAACG,CAAC,GAAG4B,MAAM,GAAG,IAAI,CAACvB,MAAM,EAAE;MAC1C,IAAI,CAACR,QAAQ,CAACG,CAAC,GAAG,CAAC,IAAI,CAACK,MAAM;IAChC,CAAC,MAAM,IAAI,IAAI,CAACR,QAAQ,CAACG,CAAC,GAAG,CAAC,IAAI,CAACK,MAAM,EAAE;MACzC,IAAI,CAACR,QAAQ,CAACG,CAAC,GAAG4B,MAAM,GAAG,IAAI,CAACvB,MAAM;IACxC;EACF;EAEA8B,IAAIA,CAACC,OAAO,EAAE;IACZA,OAAO,CAACC,IAAI,CAAC,CAAC;IACdD,OAAO,CAACE,SAAS,CAAC,IAAI,CAACzC,QAAQ,CAACE,CAAC,EAAE,IAAI,CAACF,QAAQ,CAACG,CAAC,CAAC;IACnDoC,OAAO,CAACf,MAAM,CAAC,IAAI,CAACpB,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC;IAC7CyB,OAAO,CAACG,WAAW,GAAG,SAAS;IAC/BH,OAAO,CAACI,SAAS,GAAG,SAAS;IAC7BJ,OAAO,CAACK,SAAS,GAAG,CAAC;IACrBL,OAAO,CAACM,SAAS,CAAC,CAAC;IACnBN,OAAO,CAACO,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAACtC,MAAM,CAAC;IAC/B+B,OAAO,CAACQ,MAAM,CAAC,IAAI,CAACvC,MAAM,GAAG,CAAC,EAAE,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;IAChD+B,OAAO,CAACQ,MAAM,CAAC,CAAC,IAAI,CAACvC,MAAM,GAAG,CAAC,EAAE,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;IACjD+B,OAAO,CAACS,SAAS,CAAC,CAAC;IACnBT,OAAO,CAACU,IAAI,CAAC,CAAC;IACdV,OAAO,CAACW,MAAM,CAAC,CAAC;IAChBX,OAAO,CAACY,OAAO,CAAC,CAAC;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}