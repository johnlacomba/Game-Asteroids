{"ast":null,"code":"import React from 'react';\nexport default class Asteroid {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = {\n      x: Math.random() * 2 - 1,\n      y: Math.random() * 2 - 1\n    };\n    this.rotation = 0;\n    this.rotationSpeed = Math.random() * 0.5 - 0.25;\n    this.radius = args.size || 50;\n    this.hitPoints = Math.floor(this.radius / 12) + 1; // ~5 hits for default size\n    this.delete = false;\n\n    // Generate a misshapen polygon shape\n    this.shape = [];\n    const sides = Math.floor(Math.random() * 5) + 7; // 7 to 11 sides\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * 2 * Math.PI;\n      const distance = this.radius * (0.8 + Math.random() * 0.4);\n      this.shape.push({\n        x: Math.cos(angle) * distance,\n        y: Math.sin(angle) * distance\n      });\n    }\n  }\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y\n      };\n    });\n  }\n  destroy() {\n    this.delete = true;\n  }\n  hit() {\n    this.hitPoints--;\n    if (this.hitPoints <= 0) {\n      this.destroy();\n    }\n  }\n  update(worldWidth, worldHeight) {\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n    this.rotation += this.rotationSpeed;\n\n    // World bounds collision (bounce)\n    if (this.position.x < this.radius) {\n      this.position.x = this.radius;\n      this.velocity.x *= -1;\n    } else if (this.position.x > worldWidth - this.radius) {\n      this.position.x = worldWidth - this.radius;\n      this.velocity.x *= -1;\n    }\n    if (this.position.y < this.radius) {\n      this.position.y = this.radius;\n      this.velocity.y *= -1;\n    } else if (this.position.y > worldHeight - this.radius) {\n      this.position.y = worldHeight - this.radius;\n      this.velocity.y *= -1;\n    }\n  }\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(this.shape[0].x, this.shape[0].y);\n    for (let i = 1; i < this.shape.length; i++) {\n      context.lineTo(this.shape[i].x, this.shape[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}","map":{"version":3,"names":["React","Asteroid","constructor","args","position","velocity","x","Math","random","y","rotation","rotationSpeed","radius","size","hitPoints","floor","delete","shape","sides","i","angle","PI","distance","push","cos","sin","getPolygon","map","point","rotatedX","rotatedY","destroy","hit","update","worldWidth","worldHeight","draw","context","save","translate","rotate","strokeStyle","lineWidth","beginPath","moveTo","length","lineTo","closePath","stroke","restore"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Asteroid.js"],"sourcesContent":["import React from 'react';\n\nexport default class Asteroid {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = {\n      x: Math.random() * 2 - 1,\n      y: Math.random() * 2 - 1,\n    };\n    this.rotation = 0;\n    this.rotationSpeed = Math.random() * 0.5 - 0.25;\n    this.radius = args.size || 50;\n    this.hitPoints = Math.floor(this.radius / 12) + 1; // ~5 hits for default size\n    this.delete = false;\n\n    // Generate a misshapen polygon shape\n    this.shape = [];\n    const sides = Math.floor(Math.random() * 5) + 7; // 7 to 11 sides\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * 2 * Math.PI;\n      const distance = this.radius * (0.8 + Math.random() * 0.4);\n      this.shape.push({\n        x: Math.cos(angle) * distance,\n        y: Math.sin(angle) * distance,\n      });\n    }\n  }\n\n  getPolygon() {\n    const angle = this.rotation * Math.PI / 180;\n    return this.shape.map(point => {\n      const rotatedX = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n      const rotatedY = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n      return {\n        x: rotatedX + this.position.x,\n        y: rotatedY + this.position.y,\n      };\n    });\n  }\n\n  destroy() {\n    this.delete = true;\n  }\n\n  hit() {\n    this.hitPoints--;\n    if (this.hitPoints <= 0) {\n      this.destroy();\n    }\n  }\n\n  update(worldWidth, worldHeight) {\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n    this.rotation += this.rotationSpeed;\n\n    // World bounds collision (bounce)\n    if (this.position.x < this.radius) {\n      this.position.x = this.radius;\n      this.velocity.x *= -1;\n    } else if (this.position.x > worldWidth - this.radius) {\n      this.position.x = worldWidth - this.radius;\n      this.velocity.x *= -1;\n    }\n    if (this.position.y < this.radius) {\n      this.position.y = this.radius;\n      this.velocity.y *= -1;\n    } else if (this.position.y > worldHeight - this.radius) {\n      this.position.y = worldHeight - this.radius;\n      this.velocity.y *= -1;\n    }\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(this.shape[0].x, this.shape[0].y);\n    for (let i = 1; i < this.shape.length; i++) {\n      context.lineTo(this.shape[i].x, this.shape[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}