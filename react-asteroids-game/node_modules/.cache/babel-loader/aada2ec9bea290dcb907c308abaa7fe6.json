{"ast":null,"code":"// Helper function to project a polygon onto an axis and return a min/max range.\nconst projectPolygon = (axis, polygon) => {\n  let min = Infinity;\n  let max = -Infinity;\n  for (const p of polygon) {\n    const dotProduct = p.x * axis.x + p.y * axis.y;\n    min = Math.min(min, dotProduct);\n    max = Math.max(max, dotProduct);\n  }\n  return {\n    min,\n    max\n  };\n};\n\n// Helper function to check if two 1D ranges overlap.\nconst overlap = (p1, p2) => {\n  return p1.max >= p2.min && p2.max >= p1.min;\n};\n\n// Main SAT collision detection function\nexport const checkPolygonCollision = (poly1, poly2) => {\n  const getAxes = polygon => {\n    const axes = [];\n    for (let i = 0; i < polygon.length; i++) {\n      const p1 = polygon[i];\n      const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n      const edge = {\n        x: p1.x - p2.x,\n        y: p1.y - p2.y\n      };\n      // Get the perpendicular vector (the normal)\n      const normal = {\n        x: -edge.y,\n        y: edge.x\n      };\n      axes.push(normal);\n    }\n    return axes;\n  };\n  const axes1 = getAxes(poly1);\n  const axes2 = getAxes(poly2);\n\n  // Loop over all axes\n  for (const axis of [...axes1, ...axes2]) {\n    const p1 = projectPolygon(axis, poly1);\n    const p2 = projectPolygon(axis, poly2);\n    // If there is no overlap on any axis, there is no collision\n    if (!overlap(p1, p2)) {\n      return false;\n    }\n  }\n\n  // If all axes have overlap, the polygons are colliding\n  return true;\n};\n\n// Helper for point-in-polygon test using ray-casting\nconst pointInPolygon = (point, polygon) => {\n  let isInside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x,\n      yi = polygon[i].y;\n    const xj = polygon[j].x,\n      yj = polygon[j].y;\n    const intersect = yi > point.y !== yj > point.y && point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n};\n\n// Circle-to-Polygon collision for bullets vs asteroids\nexport const checkCirclePolygonCollision = (circle, polygon) => {\n  // 1. Check if the circle's center is inside the polygon.\n  if (pointInPolygon(circle.position, polygon)) {\n    return true;\n  }\n\n  // 2. If not, check if any edge of the polygon is close to the circle.\n  for (let i = 0; i < polygon.length; i++) {\n    const p1 = polygon[i];\n    const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const lenSq = dx * dx + dy * dy;\n\n    // Find the projection of the circle's center onto the line segment\n    let t = ((circle.position.x - p1.x) * dx + (circle.position.y - p1.y) * dy) / lenSq;\n    t = Math.max(0, Math.min(1, t)); // Clamp t to the segment [0, 1]\n\n    const closestX = p1.x + t * dx;\n    const closestY = p1.y + t * dy;\n\n    // Check the distance from the closest point to the circle's center\n    const distSq = (circle.position.x - closestX) ** 2 + (circle.position.y - closestY) ** 2;\n    if (distSq < circle.radius * circle.radius) {\n      return true; // Collision detected\n    }\n  }\n  return false; // No collision\n};","map":{"version":3,"names":["projectPolygon","axis","polygon","min","Infinity","max","p","dotProduct","x","y","Math","overlap","p1","p2","checkPolygonCollision","poly1","poly2","getAxes","axes","i","length","edge","normal","push","axes1","axes2","pointInPolygon","point","isInside","j","xi","yi","xj","yj","intersect","checkCirclePolygonCollision","circle","position","dx","dy","lenSq","t","closestX","closestY","distSq","radius"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/collision.js"],"sourcesContent":["// Helper function to project a polygon onto an axis and return a min/max range.\nconst projectPolygon = (axis, polygon) => {\n  let min = Infinity;\n  let max = -Infinity;\n  for (const p of polygon) {\n    const dotProduct = p.x * axis.x + p.y * axis.y;\n    min = Math.min(min, dotProduct);\n    max = Math.max(max, dotProduct);\n  }\n  return { min, max };\n};\n\n// Helper function to check if two 1D ranges overlap.\nconst overlap = (p1, p2) => {\n  return p1.max >= p2.min && p2.max >= p1.min;\n};\n\n// Main SAT collision detection function\nexport const checkPolygonCollision = (poly1, poly2) => {\n  const getAxes = (polygon) => {\n    const axes = [];\n    for (let i = 0; i < polygon.length; i++) {\n      const p1 = polygon[i];\n      const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n      const edge = { x: p1.x - p2.x, y: p1.y - p2.y };\n      // Get the perpendicular vector (the normal)\n      const normal = { x: -edge.y, y: edge.x };\n      axes.push(normal);\n    }\n    return axes;\n  };\n\n  const axes1 = getAxes(poly1);\n  const axes2 = getAxes(poly2);\n\n  // Loop over all axes\n  for (const axis of [...axes1, ...axes2]) {\n    const p1 = projectPolygon(axis, poly1);\n    const p2 = projectPolygon(axis, poly2);\n    // If there is no overlap on any axis, there is no collision\n    if (!overlap(p1, p2)) {\n      return false;\n    }\n  }\n\n  // If all axes have overlap, the polygons are colliding\n  return true;\n};\n\n// Helper for point-in-polygon test using ray-casting\nconst pointInPolygon = (point, polygon) => {\n  let isInside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x, yi = polygon[i].y;\n    const xj = polygon[j].x, yj = polygon[j].y;\n\n    const intersect = ((yi > point.y) !== (yj > point.y))\n        && (point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi);\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n};\n\n// Circle-to-Polygon collision for bullets vs asteroids\nexport const checkCirclePolygonCollision = (circle, polygon) => {\n  // 1. Check if the circle's center is inside the polygon.\n  if (pointInPolygon(circle.position, polygon)) {\n    return true;\n  }\n\n  // 2. If not, check if any edge of the polygon is close to the circle.\n  for (let i = 0; i < polygon.length; i++) {\n    const p1 = polygon[i];\n    const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const lenSq = dx * dx + dy * dy;\n\n    // Find the projection of the circle's center onto the line segment\n    let t = ((circle.position.x - p1.x) * dx + (circle.position.y - p1.y) * dy) / lenSq;\n    t = Math.max(0, Math.min(1, t)); // Clamp t to the segment [0, 1]\n\n    const closestX = p1.x + t * dx;\n    const closestY = p1.y + t * dy;\n\n    // Check the distance from the closest point to the circle's center\n    const distSq = (circle.position.x - closestX) ** 2 + (circle.position.y - closestY) ** 2;\n\n    if (distSq < circle.radius * circle.radius) {\n      return true; // Collision detected\n    }\n  }\n\n  return false; // No collision\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}