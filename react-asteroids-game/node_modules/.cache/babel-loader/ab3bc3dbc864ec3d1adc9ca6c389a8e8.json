{"ast":null,"code":"import Bullet from './Bullet';\nexport default class UFO {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = args.velocity;\n    this.radius = 25;\n    this.delete = false;\n\n    // For the winding path\n    this.pathPhase = Math.random() * 2 * Math.PI; // Random start in the sine wave\n    this.pathAmplitude = Math.random() * 3 + 2; // How much it winds\n    this.pathFrequency = 0.05; // How fast it winds\n\n    this.shootTimer = 0;\n    this.shootCooldown = 120; // Shoots every 2 seconds (120 frames)\n\n    // UFO shape (dome + saucer)\n    this.shape = [{\n      x: -this.radius,\n      y: 0\n    }, {\n      x: -this.radius / 2,\n      y: -this.radius / 3\n    }, {\n      x: this.radius / 2,\n      y: -this.radius / 3\n    }, {\n      x: this.radius,\n      y: 0\n    }, {\n      x: this.radius * 0.7,\n      y: this.radius / 2\n    }, {\n      x: -this.radius * 0.7,\n      y: this.radius / 2\n    }];\n  }\n  getPolygon() {\n    // No rotation for the UFO, just translation\n    return this.shape.map(point => ({\n      x: point.x + this.position.x,\n      y: point.y + this.position.y\n    }));\n  }\n  destroy() {\n    this.delete = true;\n  }\n  shoot(playerPosition) {\n    const dx = playerPosition.x - this.position.x;\n    const dy = playerPosition.y - this.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const speed = 4;\n    const velocity = {\n      x: dx / distance * speed,\n      y: dy / distance * speed\n    };\n    return new Bullet({\n      position: {\n        ...this.position\n      },\n      velocity: velocity,\n      owner: 'ufo'\n    });\n  }\n  update(width, height, playerPosition) {\n    const bullets = [];\n    this.shootTimer++;\n    if (this.shootTimer >= this.shootCooldown) {\n      bullets.push(this.shoot(playerPosition));\n      this.shootTimer = 0;\n    }\n\n    // Calculate the perpendicular vector to the velocity for the sine wave\n    const perpendicular = {\n      x: -this.velocity.y,\n      y: this.velocity.x\n    };\n    const perpendicularMag = Math.sqrt(perpendicular.x * perpendicular.x + perpendicular.y * perpendicular.y);\n    const normalizedPerpendicular = {\n      x: perpendicular.x / perpendicularMag,\n      y: perpendicular.y / perpendicularMag\n    };\n\n    // Calculate the winding offset\n    const offset = Math.sin(this.pathPhase) * this.pathAmplitude;\n    this.pathPhase += this.pathFrequency;\n\n    // Update position with base velocity and winding offset\n    this.position.x += this.velocity.x + normalizedPerpendicular.x * offset;\n    this.position.y += this.velocity.y + normalizedPerpendicular.y * offset;\n\n    // Check if UFO is way off-screen to be deleted\n    const margin = this.radius * 2;\n    if (this.position.x < -margin || this.position.x > width + margin || this.position.y < -margin || this.position.y > height + margin) {\n      this.delete = true;\n    }\n    return bullets;\n  }\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(this.shape[0].x, this.shape[0].y);\n    for (let i = 1; i < this.shape.length; i++) {\n      context.lineTo(this.shape[i].x, this.shape[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}","map":{"version":3,"names":["Bullet","UFO","constructor","args","position","velocity","radius","delete","pathPhase","Math","random","PI","pathAmplitude","pathFrequency","shootTimer","shootCooldown","shape","x","y","getPolygon","map","point","destroy","shoot","playerPosition","dx","dy","distance","sqrt","speed","owner","update","width","height","bullets","push","perpendicular","perpendicularMag","normalizedPerpendicular","offset","sin","margin","draw","context","save","translate","strokeStyle","lineWidth","beginPath","moveTo","i","length","lineTo","closePath","stroke","restore"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/UFO.js"],"sourcesContent":["import Bullet from './Bullet';\n\nexport default class UFO {\n  constructor(args) {\n    this.position = args.position;\n    this.velocity = args.velocity;\n    this.radius = 25;\n    this.delete = false;\n\n    // For the winding path\n    this.pathPhase = Math.random() * 2 * Math.PI; // Random start in the sine wave\n    this.pathAmplitude = Math.random() * 3 + 2;   // How much it winds\n    this.pathFrequency = 0.05;                    // How fast it winds\n\n    this.shootTimer = 0;\n    this.shootCooldown = 120; // Shoots every 2 seconds (120 frames)\n\n    // UFO shape (dome + saucer)\n    this.shape = [\n      { x: -this.radius, y: 0 },\n      { x: -this.radius / 2, y: -this.radius / 3 },\n      { x: this.radius / 2, y: -this.radius / 3 },\n      { x: this.radius, y: 0 },\n      { x: this.radius * 0.7, y: this.radius / 2 },\n      { x: -this.radius * 0.7, y: this.radius / 2 },\n    ];\n  }\n\n  getPolygon() {\n    // No rotation for the UFO, just translation\n    return this.shape.map(point => ({\n      x: point.x + this.position.x,\n      y: point.y + this.position.y,\n    }));\n  }\n\n  destroy() {\n    this.delete = true;\n  }\n\n  shoot(playerPosition) {\n    const dx = playerPosition.x - this.position.x;\n    const dy = playerPosition.y - this.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const speed = 4;\n\n    const velocity = {\n      x: (dx / distance) * speed,\n      y: (dy / distance) * speed,\n    };\n\n    return new Bullet({\n      position: { ...this.position },\n      velocity: velocity,\n      owner: 'ufo',\n    });\n  }\n\n  update(width, height, playerPosition) {\n    const bullets = [];\n    this.shootTimer++;\n    if (this.shootTimer >= this.shootCooldown) {\n      bullets.push(this.shoot(playerPosition));\n      this.shootTimer = 0;\n    }\n\n    // Calculate the perpendicular vector to the velocity for the sine wave\n    const perpendicular = { x: -this.velocity.y, y: this.velocity.x };\n    const perpendicularMag = Math.sqrt(perpendicular.x * perpendicular.x + perpendicular.y * perpendicular.y);\n    const normalizedPerpendicular = {\n      x: perpendicular.x / perpendicularMag,\n      y: perpendicular.y / perpendicularMag,\n    };\n\n    // Calculate the winding offset\n    const offset = Math.sin(this.pathPhase) * this.pathAmplitude;\n    this.pathPhase += this.pathFrequency;\n\n    // Update position with base velocity and winding offset\n    this.position.x += this.velocity.x + normalizedPerpendicular.x * offset;\n    this.position.y += this.velocity.y + normalizedPerpendicular.y * offset;\n\n    // Check if UFO is way off-screen to be deleted\n    const margin = this.radius * 2;\n    if (\n      this.position.x < -margin ||\n      this.position.x > width + margin ||\n      this.position.y < -margin ||\n      this.position.y > height + margin\n    ) {\n      this.delete = true;\n    }\n    return bullets;\n  }\n\n  draw(context) {\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(this.shape[0].x, this.shape[0].y);\n    for (let i = 1; i < this.shape.length; i++) {\n      context.lineTo(this.shape[i].x, this.shape[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}