{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport UFO from './UFO';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const ufoBulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const ufoRef = useRef(null);\n  const playerRef = useRef(null);\n  const shootCooldownRef = useRef(0);\n  const waveCountRef = useRef(30);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [resetKey, setResetKey] = useState(0);\n  const gameOverRef = useRef(false);\n  const scoreRef = useRef(0);\n  const ufoSpawnTimerRef = useRef(0);\n  const UFO_SPAWN_TIME = 30 * 60;\n  const SHOOT_COOLDOWN = 15;\n  const WORLD_WIDTH = 3000;\n  const WORLD_HEIGHT = 2000;\n  useEffect(() => {\n    const handleRestart = e => {\n      if (e.key === 'Enter') {\n        // Clear all game object arrays\n        asteroidsRef.current = [];\n        bulletsRef.current = [];\n        ufoBulletsRef.current = [];\n        debrisRef.current = [];\n        ufoRef.current = null;\n\n        // Reset game state refs\n        scoreRef.current = 0;\n        gameOverRef.current = false;\n        waveCountRef.current = 30;\n        ufoSpawnTimerRef.current = 0;\n        shootCooldownRef.current = 0;\n\n        // Trigger a full re-initialization of the game\n        setIsGameOver(false);\n        setResetKey(prev => prev + 1);\n      }\n    };\n    if (isGameOver) {\n      window.addEventListener('keydown', handleRestart);\n    }\n    return () => {\n      window.removeEventListener('keydown', handleRestart);\n    };\n  }, [isGameOver]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Initialize Player\n    const player = new Player({\n      position: {\n        x: WORLD_WIDTH / 2,\n        y: WORLD_HEIGHT / 2\n      }\n    });\n    playerRef.current = player;\n    const spawnUFO = () => {\n      const side = Math.floor(Math.random() * 4);\n      let position, velocity;\n      const speed = 1.5;\n      switch (side) {\n        case 0:\n          // Top\n          position = {\n            x: Math.random() * WORLD_WIDTH,\n            y: -50\n          };\n          velocity = {\n            x: Math.random() * 2 - 1,\n            y: speed\n          };\n          break;\n        case 1:\n          // Right\n          position = {\n            x: WORLD_WIDTH + 50,\n            y: Math.random() * WORLD_HEIGHT\n          };\n          velocity = {\n            x: -speed,\n            y: Math.random() * 2 - 1\n          };\n          break;\n        case 2:\n          // Bottom\n          position = {\n            x: Math.random() * WORLD_WIDTH,\n            y: WORLD_HEIGHT + 50\n          };\n          velocity = {\n            x: Math.random() * 2 - 1,\n            y: -speed\n          };\n          break;\n        case 3: // Left\n        default:\n          position = {\n            x: -50,\n            y: Math.random() * WORLD_HEIGHT\n          };\n          velocity = {\n            x: speed,\n            y: Math.random() * 2 - 1\n          };\n          break;\n      }\n      ufoRef.current = new UFO({\n        position,\n        velocity\n      });\n    };\n    const spawnAsteroids = count => {\n      const safeRadius = 200;\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * WORLD_WIDTH,\n            y: Math.random() * WORLD_HEIGHT\n          };\n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n    let animationFrameId;\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOverRef.current) {\n        if (shootCooldownRef.current > 0) {\n          shootCooldownRef.current--;\n        }\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && shootCooldownRef.current <= 0) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          shootCooldownRef.current = SHOOT_COOLDOWN;\n        }\n        // Update player\n        currentPlayer.update(keys, WORLD_WIDTH, WORLD_HEIGHT);\n      }\n\n      // UFO Spawn Logic\n      if (!gameOverRef.current) {\n        ufoSpawnTimerRef.current++;\n        if (!ufoRef.current && ufoSpawnTimerRef.current > UFO_SPAWN_TIME) {\n          spawnUFO();\n          ufoSpawnTimerRef.current = 0;\n        }\n      }\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // --- Camera and World Rendering ---\n      context.save();\n\n      // Center camera on player\n      const cameraX = currentPlayer.position.x - canvas.width / 2;\n      const cameraY = currentPlayer.position.y - canvas.height / 2;\n      context.translate(-cameraX, -cameraY);\n\n      // Draw world border\n      context.strokeStyle = 'white';\n      context.lineWidth = 4;\n      context.strokeRect(0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw UFO\n      if (ufoRef.current) {\n        const newUfoBullets = ufoRef.current.update(WORLD_WIDTH, WORLD_HEIGHT, currentPlayer.position);\n        ufoBulletsRef.current.push(...newUfoBullets);\n        ufoRef.current.draw(context);\n        if (ufoRef.current.delete) {\n          ufoRef.current = null;\n        }\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(WORLD_WIDTH, WORLD_HEIGHT));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n      bulletsRef.current.forEach(bullet => bullet.update(WORLD_WIDTH, WORLD_HEIGHT));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n      ufoBulletsRef.current.forEach(bullet => bullet.update(WORLD_WIDTH, WORLD_HEIGHT));\n      ufoBulletsRef.current.forEach(bullet => bullet.draw(context));\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // --- End Camera ---\n      context.restore();\n\n      // --- UI Rendering (fixed on screen) ---\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Bullets with UFO\n      if (ufoRef.current) {\n        const ufoPolygon = ufoRef.current.getPolygon();\n        bulletsRef.current.forEach(bullet => {\n          if (!bullet.delete && checkCirclePolygonCollision(bullet, ufoPolygon)) {\n            bullet.delete = true;\n            ufoRef.current.destroy();\n            scoreRef.current += 500; // UFO is worth more points\n          }\n        });\n      }\n\n      // Collision Detection: UFO Bullets with Player\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        ufoBulletsRef.current.forEach(bullet => {\n          if (checkCirclePolygonCollision(bullet, playerPolygon)) {\n            bullet.delete = true;\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with UFO\n      if (!gameOverRef.current && ufoRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        const ufoPolygon = ufoRef.current.getPolygon();\n        if (checkPolygonCollision(playerPolygon, ufoPolygon)) {\n          debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n          gameOverRef.current = true;\n          setIsGameOver(true);\n          ufoRef.current.destroy(); // Also destroy the UFO\n        }\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      ufoBulletsRef.current = ufoBulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOverRef.current && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [resetKey]); // Add resetKey to dependency array\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '48px',\n        textAlign: 'center'\n      },\n      children: [\"GAME OVER\", /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '24px',\n          marginTop: '20px'\n        },\n        children: \"Press Enter to Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"dd1tNzdi45cSyOFfVJI1VnmGvXw=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Player","Asteroid","Debris","UFO","handleInput","checkPolygonCollision","checkCirclePolygonCollision","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","bulletsRef","ufoBulletsRef","asteroidsRef","debrisRef","ufoRef","playerRef","shootCooldownRef","waveCountRef","isGameOver","setIsGameOver","resetKey","setResetKey","gameOverRef","scoreRef","ufoSpawnTimerRef","UFO_SPAWN_TIME","SHOOT_COOLDOWN","WORLD_WIDTH","WORLD_HEIGHT","handleRestart","e","key","current","prev","window","addEventListener","removeEventListener","canvas","context","getContext","width","height","player","position","x","y","spawnUFO","side","Math","floor","random","velocity","speed","spawnAsteroids","count","safeRadius","i","asteroidPosition","isSafe","dx","dy","distance","sqrt","push","animationFrameId","gameLoop","currentPlayer","keys","shoot","update","fillStyle","fillRect","save","cameraX","cameraY","translate","strokeStyle","lineWidth","strokeRect","delete","draw","newUfoBullets","forEach","asteroid","bullet","d","restore","font","textAlign","textBaseline","fillText","getPolygon","hitPoints","hit","ufoPolygon","destroy","playerPolygon","concat","newAsteroids","radius","size","filter","b","a","length","requestAnimationFrame","cancelAnimationFrame","children","style","top","left","transform","color","fontSize","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport UFO from './UFO';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const ufoBulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const ufoRef = useRef(null);\n  const playerRef = useRef(null);\n  const shootCooldownRef = useRef(0);\n  const waveCountRef = useRef(30);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [resetKey, setResetKey] = useState(0);\n  const gameOverRef = useRef(false);\n  const scoreRef = useRef(0);\n  const ufoSpawnTimerRef = useRef(0);\n  const UFO_SPAWN_TIME = 30 * 60;\n  const SHOOT_COOLDOWN = 15;\n  const WORLD_WIDTH = 3000;\n  const WORLD_HEIGHT = 2000;\n\n  useEffect(() => {\n    const handleRestart = (e) => {\n      if (e.key === 'Enter') {\n        // Clear all game object arrays\n        asteroidsRef.current = [];\n        bulletsRef.current = [];\n        ufoBulletsRef.current = [];\n        debrisRef.current = [];\n        ufoRef.current = null;\n\n        // Reset game state refs\n        scoreRef.current = 0;\n        gameOverRef.current = false;\n        waveCountRef.current = 30;\n        ufoSpawnTimerRef.current = 0;\n        shootCooldownRef.current = 0;\n\n        // Trigger a full re-initialization of the game\n        setIsGameOver(false);\n        setResetKey(prev => prev + 1);\n      }\n    };\n\n    if (isGameOver) {\n      window.addEventListener('keydown', handleRestart);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleRestart);\n    };\n  }, [isGameOver]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: WORLD_WIDTH / 2, y: WORLD_HEIGHT / 2 },\n    });\n    playerRef.current = player;\n\n    const spawnUFO = () => {\n      const side = Math.floor(Math.random() * 4);\n      let position, velocity;\n      const speed = 1.5;\n\n      switch (side) {\n        case 0: // Top\n          position = { x: Math.random() * WORLD_WIDTH, y: -50 };\n          velocity = { x: Math.random() * 2 - 1, y: speed };\n          break;\n        case 1: // Right\n          position = { x: WORLD_WIDTH + 50, y: Math.random() * WORLD_HEIGHT };\n          velocity = { x: -speed, y: Math.random() * 2 - 1 };\n          break;\n        case 2: // Bottom\n          position = { x: Math.random() * WORLD_WIDTH, y: WORLD_HEIGHT + 50 };\n          velocity = { x: Math.random() * 2 - 1, y: -speed };\n          break;\n        case 3: // Left\n        default:\n          position = { x: -50, y: Math.random() * WORLD_HEIGHT };\n          velocity = { x: speed, y: Math.random() * 2 - 1 };\n          break;\n      }\n      ufoRef.current = new UFO({ position, velocity });\n    };\n\n    const spawnAsteroids = (count) => {\n      const safeRadius = 200;\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * WORLD_WIDTH,\n            y: Math.random() * WORLD_HEIGHT,\n          };\n  \n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n  \n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOverRef.current) {\n        if (shootCooldownRef.current > 0) {\n          shootCooldownRef.current--;\n        }\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && shootCooldownRef.current <= 0) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          shootCooldownRef.current = SHOOT_COOLDOWN;\n        }\n        // Update player\n        currentPlayer.update(keys, WORLD_WIDTH, WORLD_HEIGHT);\n      }\n\n      // UFO Spawn Logic\n      if (!gameOverRef.current) {\n        ufoSpawnTimerRef.current++;\n        if (!ufoRef.current && ufoSpawnTimerRef.current > UFO_SPAWN_TIME) {\n          spawnUFO();\n          ufoSpawnTimerRef.current = 0;\n        }\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // --- Camera and World Rendering ---\n      context.save();\n\n      // Center camera on player\n      const cameraX = currentPlayer.position.x - canvas.width / 2;\n      const cameraY = currentPlayer.position.y - canvas.height / 2;\n      context.translate(-cameraX, -cameraY);\n\n      // Draw world border\n      context.strokeStyle = 'white';\n      context.lineWidth = 4;\n      context.strokeRect(0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw UFO\n      if (ufoRef.current) {\n        const newUfoBullets = ufoRef.current.update(WORLD_WIDTH, WORLD_HEIGHT, currentPlayer.position);\n        ufoBulletsRef.current.push(...newUfoBullets);\n\n        ufoRef.current.draw(context);\n        if (ufoRef.current.delete) {\n          ufoRef.current = null;\n        }\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(WORLD_WIDTH, WORLD_HEIGHT));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      bulletsRef.current.forEach(bullet => bullet.update(WORLD_WIDTH, WORLD_HEIGHT));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      ufoBulletsRef.current.forEach(bullet => bullet.update(WORLD_WIDTH, WORLD_HEIGHT));\n      ufoBulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // --- End Camera ---\n      context.restore();\n\n      // --- UI Rendering (fixed on screen) ---\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Bullets with UFO\n      if (ufoRef.current) {\n        const ufoPolygon = ufoRef.current.getPolygon();\n        bulletsRef.current.forEach(bullet => {\n          if (!bullet.delete && checkCirclePolygonCollision(bullet, ufoPolygon)) {\n            bullet.delete = true;\n            ufoRef.current.destroy();\n            scoreRef.current += 500; // UFO is worth more points\n          }\n        });\n      }\n\n      // Collision Detection: UFO Bullets with Player\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        ufoBulletsRef.current.forEach(bullet => {\n          if (checkCirclePolygonCollision(bullet, playerPolygon)) {\n            bullet.delete = true;\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with UFO\n      if (!gameOverRef.current && ufoRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        const ufoPolygon = ufoRef.current.getPolygon();\n        if (checkPolygonCollision(playerPolygon, ufoPolygon)) {\n          debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n          gameOverRef.current = true;\n          setIsGameOver(true);\n          ufoRef.current.destroy(); // Also destroy the UFO\n        }\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      ufoBulletsRef.current = ufoBulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOverRef.current && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [resetKey]); // Add resetKey to dependency array\n\n  return (\n    <>\n      {isGameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n          <p style={{ fontSize: '24px', marginTop: '20px' }}>Press Enter to Restart</p>\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,qBAAqB,EAAEC,2BAA2B,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvF,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMgB,UAAU,GAAGhB,MAAM,CAAC,EAAE,CAAC;EAC7B,MAAMiB,aAAa,GAAGjB,MAAM,CAAC,EAAE,CAAC;EAChC,MAAMkB,YAAY,GAAGlB,MAAM,CAAC,EAAE,CAAC;EAC/B,MAAMmB,SAAS,GAAGnB,MAAM,CAAC,EAAE,CAAC;EAC5B,MAAMoB,MAAM,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMqB,SAAS,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMsB,gBAAgB,GAAGtB,MAAM,CAAC,CAAC,CAAC;EAClC,MAAMuB,YAAY,GAAGvB,MAAM,CAAC,EAAE,CAAC;EAC/B,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM2B,WAAW,GAAG5B,MAAM,CAAC,KAAK,CAAC;EACjC,MAAM6B,QAAQ,GAAG7B,MAAM,CAAC,CAAC,CAAC;EAC1B,MAAM8B,gBAAgB,GAAG9B,MAAM,CAAC,CAAC,CAAC;EAClC,MAAM+B,cAAc,GAAG,EAAE,GAAG,EAAE;EAC9B,MAAMC,cAAc,GAAG,EAAE;EACzB,MAAMC,WAAW,GAAG,IAAI;EACxB,MAAMC,YAAY,GAAG,IAAI;EAEzBnC,SAAS,CAAC,MAAM;IACd,MAAMoC,aAAa,GAAIC,CAAC,IAAK;MAC3B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;QACrB;QACAnB,YAAY,CAACoB,OAAO,GAAG,EAAE;QACzBtB,UAAU,CAACsB,OAAO,GAAG,EAAE;QACvBrB,aAAa,CAACqB,OAAO,GAAG,EAAE;QAC1BnB,SAAS,CAACmB,OAAO,GAAG,EAAE;QACtBlB,MAAM,CAACkB,OAAO,GAAG,IAAI;;QAErB;QACAT,QAAQ,CAACS,OAAO,GAAG,CAAC;QACpBV,WAAW,CAACU,OAAO,GAAG,KAAK;QAC3Bf,YAAY,CAACe,OAAO,GAAG,EAAE;QACzBR,gBAAgB,CAACQ,OAAO,GAAG,CAAC;QAC5BhB,gBAAgB,CAACgB,OAAO,GAAG,CAAC;;QAE5B;QACAb,aAAa,CAAC,KAAK,CAAC;QACpBE,WAAW,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MAC/B;IACF,CAAC;IAED,IAAIf,UAAU,EAAE;MACdgB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACnD;IAEA,OAAO,MAAM;MACXK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACX,UAAU,CAAC,CAAC;EAEhBzB,SAAS,CAAC,MAAM;IACd,MAAM4C,MAAM,GAAG5B,SAAS,CAACuB,OAAO;IAChC,MAAMM,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACvCF,MAAM,CAACG,KAAK,GAAG,IAAI;IACnBH,MAAM,CAACI,MAAM,GAAG,GAAG;;IAEnB;IACA,MAAMC,MAAM,GAAG,IAAI9C,MAAM,CAAC;MACxB+C,QAAQ,EAAE;QAAEC,CAAC,EAAEjB,WAAW,GAAG,CAAC;QAAEkB,CAAC,EAAEjB,YAAY,GAAG;MAAE;IACtD,CAAC,CAAC;IACFb,SAAS,CAACiB,OAAO,GAAGU,MAAM;IAE1B,MAAMI,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MAC1C,IAAIP,QAAQ,EAAEQ,QAAQ;MACtB,MAAMC,KAAK,GAAG,GAAG;MAEjB,QAAQL,IAAI;QACV,KAAK,CAAC;UAAE;UACNJ,QAAQ,GAAG;YAAEC,CAAC,EAAEI,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvB,WAAW;YAAEkB,CAAC,EAAE,CAAC;UAAG,CAAC;UACrDM,QAAQ,GAAG;YAAEP,CAAC,EAAEI,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;YAAEL,CAAC,EAAEO;UAAM,CAAC;UACjD;QACF,KAAK,CAAC;UAAE;UACNT,QAAQ,GAAG;YAAEC,CAAC,EAAEjB,WAAW,GAAG,EAAE;YAAEkB,CAAC,EAAEG,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtB;UAAa,CAAC;UACnEuB,QAAQ,GAAG;YAAEP,CAAC,EAAE,CAACQ,KAAK;YAAEP,CAAC,EAAEG,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG;UAAE,CAAC;UAClD;QACF,KAAK,CAAC;UAAE;UACNP,QAAQ,GAAG;YAAEC,CAAC,EAAEI,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvB,WAAW;YAAEkB,CAAC,EAAEjB,YAAY,GAAG;UAAG,CAAC;UACnEuB,QAAQ,GAAG;YAAEP,CAAC,EAAEI,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;YAAEL,CAAC,EAAE,CAACO;UAAM,CAAC;UAClD;QACF,KAAK,CAAC,CAAC,CAAC;QACR;UACET,QAAQ,GAAG;YAAEC,CAAC,EAAE,CAAC,EAAE;YAAEC,CAAC,EAAEG,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtB;UAAa,CAAC;UACtDuB,QAAQ,GAAG;YAAEP,CAAC,EAAEQ,KAAK;YAAEP,CAAC,EAAEG,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG;UAAE,CAAC;UACjD;MACJ;MACApC,MAAM,CAACkB,OAAO,GAAG,IAAIjC,GAAG,CAAC;QAAE4C,QAAQ;QAAEQ;MAAS,CAAC,CAAC;IAClD,CAAC;IAED,MAAME,cAAc,GAAIC,KAAK,IAAK;MAChC,MAAMC,UAAU,GAAG,GAAG;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;QAC9B,IAAIC,gBAAgB;QACpB,IAAIC,MAAM,GAAG,KAAK;QAClB,OAAO,CAACA,MAAM,EAAE;UACdD,gBAAgB,GAAG;YACjBb,CAAC,EAAEI,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvB,WAAW;YAC9BkB,CAAC,EAAEG,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtB;UACrB,CAAC;UAED,MAAM+B,EAAE,GAAGF,gBAAgB,CAACb,CAAC,GAAGF,MAAM,CAACC,QAAQ,CAACC,CAAC;UACjD,MAAMgB,EAAE,GAAGH,gBAAgB,CAACZ,CAAC,GAAGH,MAAM,CAACC,QAAQ,CAACE,CAAC;UACjD,MAAMgB,QAAQ,GAAGb,IAAI,CAACc,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;UAE7C,IAAIC,QAAQ,GAAGN,UAAU,EAAE;YACzBG,MAAM,GAAG,IAAI;UACf;QACF;QACA9C,YAAY,CAACoB,OAAO,CAAC+B,IAAI,CAAC,IAAIlE,QAAQ,CAAC;UACrC8C,QAAQ,EAAEc;QACZ,CAAC,CAAC,CAAC;MACL;IACF,CAAC;;IAED;IACAJ,cAAc,CAACpC,YAAY,CAACe,OAAO,CAAC;IAEpC,IAAIgC,gBAAgB;IAEpB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMC,aAAa,GAAGnD,SAAS,CAACiB,OAAO;;MAEvC;MACA,IAAI,CAACV,WAAW,CAACU,OAAO,EAAE;QACxB,IAAIhB,gBAAgB,CAACgB,OAAO,GAAG,CAAC,EAAE;UAChChB,gBAAgB,CAACgB,OAAO,EAAE;QAC5B;QACA,MAAMmC,IAAI,GAAGnE,WAAW,CAAC,CAAC;QAC1B;QACA,IAAImE,IAAI,CAAC,GAAG,CAAC,IAAInD,gBAAgB,CAACgB,OAAO,IAAI,CAAC,EAAE;UAC9CtB,UAAU,CAACsB,OAAO,CAAC+B,IAAI,CAACG,aAAa,CAACE,KAAK,CAAC,CAAC,CAAC;UAC9CpD,gBAAgB,CAACgB,OAAO,GAAGN,cAAc;QAC3C;QACA;QACAwC,aAAa,CAACG,MAAM,CAACF,IAAI,EAAExC,WAAW,EAAEC,YAAY,CAAC;MACvD;;MAEA;MACA,IAAI,CAACN,WAAW,CAACU,OAAO,EAAE;QACxBR,gBAAgB,CAACQ,OAAO,EAAE;QAC1B,IAAI,CAAClB,MAAM,CAACkB,OAAO,IAAIR,gBAAgB,CAACQ,OAAO,GAAGP,cAAc,EAAE;UAChEqB,QAAQ,CAAC,CAAC;UACVtB,gBAAgB,CAACQ,OAAO,GAAG,CAAC;QAC9B;MACF;MAEAM,OAAO,CAACgC,SAAS,GAAG,OAAO;MAC3BhC,OAAO,CAACiC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAElC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;;MAEnD;MACAH,OAAO,CAACkC,IAAI,CAAC,CAAC;;MAEd;MACA,MAAMC,OAAO,GAAGP,aAAa,CAACvB,QAAQ,CAACC,CAAC,GAAGP,MAAM,CAACG,KAAK,GAAG,CAAC;MAC3D,MAAMkC,OAAO,GAAGR,aAAa,CAACvB,QAAQ,CAACE,CAAC,GAAGR,MAAM,CAACI,MAAM,GAAG,CAAC;MAC5DH,OAAO,CAACqC,SAAS,CAAC,CAACF,OAAO,EAAE,CAACC,OAAO,CAAC;;MAErC;MACApC,OAAO,CAACsC,WAAW,GAAG,OAAO;MAC7BtC,OAAO,CAACuC,SAAS,GAAG,CAAC;MACrBvC,OAAO,CAACwC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAEnD,WAAW,EAAEC,YAAY,CAAC;;MAEnD;MACA,IAAI,CAACsC,aAAa,CAACa,MAAM,EAAE;QACzBb,aAAa,CAACc,IAAI,CAAC1C,OAAO,CAAC;MAC7B;;MAEA;MACA,IAAIxB,MAAM,CAACkB,OAAO,EAAE;QAClB,MAAMiD,aAAa,GAAGnE,MAAM,CAACkB,OAAO,CAACqC,MAAM,CAAC1C,WAAW,EAAEC,YAAY,EAAEsC,aAAa,CAACvB,QAAQ,CAAC;QAC9FhC,aAAa,CAACqB,OAAO,CAAC+B,IAAI,CAAC,GAAGkB,aAAa,CAAC;QAE5CnE,MAAM,CAACkB,OAAO,CAACgD,IAAI,CAAC1C,OAAO,CAAC;QAC5B,IAAIxB,MAAM,CAACkB,OAAO,CAAC+C,MAAM,EAAE;UACzBjE,MAAM,CAACkB,OAAO,GAAG,IAAI;QACvB;MACF;;MAEA;MACApB,YAAY,CAACoB,OAAO,CAACkD,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACd,MAAM,CAAC1C,WAAW,EAAEC,YAAY,CAAC,CAAC;MACpFhB,YAAY,CAACoB,OAAO,CAACkD,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACH,IAAI,CAAC1C,OAAO,CAAC,CAAC;MAEhE5B,UAAU,CAACsB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAIA,MAAM,CAACf,MAAM,CAAC1C,WAAW,EAAEC,YAAY,CAAC,CAAC;MAC9ElB,UAAU,CAACsB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAIA,MAAM,CAACJ,IAAI,CAAC1C,OAAO,CAAC,CAAC;MAE1D3B,aAAa,CAACqB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAIA,MAAM,CAACf,MAAM,CAAC1C,WAAW,EAAEC,YAAY,CAAC,CAAC;MACjFjB,aAAa,CAACqB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAIA,MAAM,CAACJ,IAAI,CAAC1C,OAAO,CAAC,CAAC;MAE7DzB,SAAS,CAACmB,OAAO,CAACkD,OAAO,CAACG,CAAC,IAAIA,CAAC,CAAChB,MAAM,CAAC,CAAC,CAAC;MAC1CxD,SAAS,CAACmB,OAAO,CAACkD,OAAO,CAACG,CAAC,IAAIA,CAAC,CAACL,IAAI,CAAC1C,OAAO,CAAC,CAAC;;MAE/C;MACAA,OAAO,CAACgD,OAAO,CAAC,CAAC;;MAEjB;MACA;MACAhD,OAAO,CAACgC,SAAS,GAAG,OAAO;MAC3BhC,OAAO,CAACiD,IAAI,GAAG,YAAY;MAC3BjD,OAAO,CAACkD,SAAS,GAAG,MAAM;MAC1BlD,OAAO,CAACmD,YAAY,GAAG,KAAK;MAC5BnD,OAAO,CAACoD,QAAQ,CAAC,UAAUnE,QAAQ,CAACS,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;MAEtD;MACAtB,UAAU,CAACsB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAI;QACnCxE,YAAY,CAACoB,OAAO,CAACkD,OAAO,CAACC,QAAQ,IAAI;UACvC,IAAIjF,2BAA2B,CAACkF,MAAM,EAAED,QAAQ,CAACQ,UAAU,CAAC,CAAC,CAAC,EAAE;YAC9DP,MAAM,CAACL,MAAM,GAAG,IAAI;YACpB,IAAII,QAAQ,CAACS,SAAS,GAAG,CAAC,IAAI,CAAC,EAAE;cAC/BrE,QAAQ,CAACS,OAAO,IAAI,GAAG;YACzB;YACAmD,QAAQ,CAACU,GAAG,CAAC,CAAC;UAChB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI/E,MAAM,CAACkB,OAAO,EAAE;QAClB,MAAM8D,UAAU,GAAGhF,MAAM,CAACkB,OAAO,CAAC2D,UAAU,CAAC,CAAC;QAC9CjF,UAAU,CAACsB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAI;UACnC,IAAI,CAACA,MAAM,CAACL,MAAM,IAAI7E,2BAA2B,CAACkF,MAAM,EAAEU,UAAU,CAAC,EAAE;YACrEV,MAAM,CAACL,MAAM,GAAG,IAAI;YACpBjE,MAAM,CAACkB,OAAO,CAAC+D,OAAO,CAAC,CAAC;YACxBxE,QAAQ,CAACS,OAAO,IAAI,GAAG,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAACV,WAAW,CAACU,OAAO,EAAE;QACxB,MAAMgE,aAAa,GAAG9B,aAAa,CAACyB,UAAU,CAAC,CAAC;QAChDhF,aAAa,CAACqB,OAAO,CAACkD,OAAO,CAACE,MAAM,IAAI;UACtC,IAAIlF,2BAA2B,CAACkF,MAAM,EAAEY,aAAa,CAAC,EAAE;YACtDZ,MAAM,CAACL,MAAM,GAAG,IAAI;YACpBlE,SAAS,CAACmB,OAAO,GAAGnB,SAAS,CAACmB,OAAO,CAACiE,MAAM,CAAC/B,aAAa,CAAC6B,OAAO,CAAC,CAAC,CAAC;YACrEzE,WAAW,CAACU,OAAO,GAAG,IAAI;YAC1Bb,aAAa,CAAC,IAAI,CAAC;UACrB;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAACG,WAAW,CAACU,OAAO,EAAE;QACxB,MAAMgE,aAAa,GAAG9B,aAAa,CAACyB,UAAU,CAAC,CAAC;QAChD/E,YAAY,CAACoB,OAAO,CAACkD,OAAO,CAACC,QAAQ,IAAI;UACvC,IAAIlF,qBAAqB,CAAC+F,aAAa,EAAEb,QAAQ,CAACQ,UAAU,CAAC,CAAC,CAAC,EAAE;YAC/D9E,SAAS,CAACmB,OAAO,GAAGnB,SAAS,CAACmB,OAAO,CAACiE,MAAM,CAAC/B,aAAa,CAAC6B,OAAO,CAAC,CAAC,CAAC;YACrEzE,WAAW,CAACU,OAAO,GAAG,IAAI;YAC1Bb,aAAa,CAAC,IAAI,CAAC;UACrB;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAACG,WAAW,CAACU,OAAO,IAAIlB,MAAM,CAACkB,OAAO,EAAE;QAC1C,MAAMgE,aAAa,GAAG9B,aAAa,CAACyB,UAAU,CAAC,CAAC;QAChD,MAAMG,UAAU,GAAGhF,MAAM,CAACkB,OAAO,CAAC2D,UAAU,CAAC,CAAC;QAC9C,IAAI1F,qBAAqB,CAAC+F,aAAa,EAAEF,UAAU,CAAC,EAAE;UACpDjF,SAAS,CAACmB,OAAO,GAAGnB,SAAS,CAACmB,OAAO,CAACiE,MAAM,CAAC/B,aAAa,CAAC6B,OAAO,CAAC,CAAC,CAAC;UACrEzE,WAAW,CAACU,OAAO,GAAG,IAAI;UAC1Bb,aAAa,CAAC,IAAI,CAAC;UACnBL,MAAM,CAACkB,OAAO,CAAC+D,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5B;MACF;;MAEA;MACA,MAAMG,YAAY,GAAG,EAAE;MACvBtF,YAAY,CAACoB,OAAO,CAACkD,OAAO,CAACC,QAAQ,IAAI;QACvC;QACA,IAAIA,QAAQ,CAACJ,MAAM,IAAII,QAAQ,CAACgB,MAAM,IAAI,EAAE,EAAE;UAC5C;UACAD,YAAY,CAACnC,IAAI,CAAC,IAAIlE,QAAQ,CAAC;YAC7B8C,QAAQ,EAAE;cAAE,GAAGwC,QAAQ,CAACxC;YAAS,CAAC;YAClCyD,IAAI,EAAEjB,QAAQ,CAACgB,MAAM,GAAG;UAC1B,CAAC,CAAC,CAAC;UACHD,YAAY,CAACnC,IAAI,CAAC,IAAIlE,QAAQ,CAAC;YAC7B8C,QAAQ,EAAE;cAAE,GAAGwC,QAAQ,CAACxC;YAAS,CAAC;YAClCyD,IAAI,EAAEjB,QAAQ,CAACgB,MAAM,GAAG;UAC1B,CAAC,CAAC,CAAC;QACL;MACF,CAAC,CAAC;;MAEF;MACAzF,UAAU,CAACsB,OAAO,GAAGtB,UAAU,CAACsB,OAAO,CAACqE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvB,MAAM,CAAC;MAC9DpE,aAAa,CAACqB,OAAO,GAAGrB,aAAa,CAACqB,OAAO,CAACqE,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACvB,MAAM,CAAC;MACpElE,SAAS,CAACmB,OAAO,GAAGnB,SAAS,CAACmB,OAAO,CAACqE,MAAM,CAAChB,CAAC,IAAI,CAACA,CAAC,CAACN,MAAM,CAAC;MAC5DnE,YAAY,CAACoB,OAAO,GAAGpB,YAAY,CAACoB,OAAO,CAACqE,MAAM,CAACE,CAAC,IAAI,CAACA,CAAC,CAACxB,MAAM,CAAC,CAACkB,MAAM,CAACC,YAAY,CAAC;;MAEvF;MACA,IAAI,CAAC5E,WAAW,CAACU,OAAO,IAAIpB,YAAY,CAACoB,OAAO,CAACwE,MAAM,KAAK,CAAC,EAAE;QAC7DvF,YAAY,CAACe,OAAO,EAAE;QACtBqB,cAAc,CAACpC,YAAY,CAACe,OAAO,CAAC;MACtC;MAEAgC,gBAAgB,GAAG9B,MAAM,CAACuE,qBAAqB,CAACxC,QAAQ,CAAC;IAC3D,CAAC;IAEDA,QAAQ,CAAC,CAAC;IAEV,OAAO,MAAM;MACX/B,MAAM,CAACwE,oBAAoB,CAAC1C,gBAAgB,CAAC;IAC/C,CAAC;EACH,CAAC,EAAE,CAAC5C,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEhB,OAAA,CAAAE,SAAA;IAAAqG,QAAA,GACGzF,UAAU,iBACTd,OAAA;MAAKwG,KAAK,EAAE;QAAEjE,QAAQ,EAAE,UAAU;QAAEkE,GAAG,EAAE,KAAK;QAAEC,IAAI,EAAE,KAAK;QAAEC,SAAS,EAAE,uBAAuB;QAAEC,KAAK,EAAE,OAAO;QAAEC,QAAQ,EAAE,MAAM;QAAEzB,SAAS,EAAE;MAAS,CAAE;MAAAmB,QAAA,GAAC,WAExJ,eAAAvG,OAAA;QAAGwG,KAAK,EAAE;UAAEK,QAAQ,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAP,QAAA,EAAC;MAAsB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CACN,eACDlH,OAAA;MAAQmH,GAAG,EAAE9G;IAAU;MAAA0G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC1B,CAAC;AAEP,CAAC;AAAC9G,EAAA,CA5TID,IAAI;AAAAiH,EAAA,GAAJjH,IAAI;AA8TV,eAAeA,IAAI;AAAC,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}