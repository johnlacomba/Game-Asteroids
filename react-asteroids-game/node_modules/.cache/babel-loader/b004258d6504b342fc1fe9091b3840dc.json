{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      }\n    });\n    playerRef.current = player;\n\n    // Initialize Asteroids\n    const safeRadius = 200; // The radius around the player where asteroids won't spawn\n    for (let i = 0; i < 8; i++) {\n      let asteroidPosition;\n      let isSafe = false;\n      while (!isSafe) {\n        asteroidPosition = {\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height\n        };\n        const dx = asteroidPosition.x - player.position.x;\n        const dy = asteroidPosition.y - player.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance > safeRadius) {\n          isSafe = true;\n        }\n      }\n      asteroidsRef.current.push(new Asteroid({\n        position: asteroidPosition\n      }));\n    }\n    let animationFrameId;\n    const gameLoop = () => {\n      if (!playerRef.current || playerRef.current.delete) {\n        setGameOver(true);\n        window.cancelAnimationFrame(animationFrameId);\n        return;\n      }\n      const keys = handleInput();\n      const player = playerRef.current;\n\n      // Handle shooting\n      if (keys[' '] && canShootRef.current) {\n        bulletsRef.current.push(player.shoot());\n        canShootRef.current = false;\n      }\n      if (!keys[' ']) {\n        canShootRef.current = true;\n      }\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw player\n      player.update(keys, canvas.width, canvas.height);\n      player.draw(context);\n\n      // Update and draw asteroids\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      // Update and draw bullets\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids\n      const playerPolygon = player.getPolygon();\n      asteroidsRef.current.forEach(asteroid => {\n        if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n          player.destroy();\n        }\n      });\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '48px',\n        textAlign: 'center'\n      },\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"fO8jgUe4uJO42odWggleSouvH0c=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Player","Asteroid","handleInput","checkPolygonCollision","checkCirclePolygonCollision","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","bulletsRef","asteroidsRef","playerRef","canShootRef","gameOver","setGameOver","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","player","position","x","y","safeRadius","i","asteroidPosition","isSafe","Math","random","dx","dy","distance","sqrt","push","animationFrameId","gameLoop","delete","cancelAnimationFrame","keys","shoot","fillStyle","fillRect","update","draw","forEach","asteroid","bullet","getPolygon","hit","playerPolygon","destroy","newAsteroids","radius","size","filter","b","a","concat","requestAnimationFrame","children","style","top","left","transform","color","fontSize","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: canvas.width / 2, y: canvas.height / 2 },\n    });\n    playerRef.current = player;\n\n    // Initialize Asteroids\n    const safeRadius = 200; // The radius around the player where asteroids won't spawn\n    for (let i = 0; i < 8; i++) {\n      let asteroidPosition;\n      let isSafe = false;\n      while (!isSafe) {\n        asteroidPosition = {\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n        };\n\n        const dx = asteroidPosition.x - player.position.x;\n        const dy = asteroidPosition.y - player.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance > safeRadius) {\n          isSafe = true;\n        }\n      }\n      asteroidsRef.current.push(new Asteroid({\n        position: asteroidPosition\n      }));\n    }\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      if (!playerRef.current || playerRef.current.delete) {\n        setGameOver(true);\n        window.cancelAnimationFrame(animationFrameId);\n        return;\n      }\n\n      const keys = handleInput();\n      const player = playerRef.current;\n\n      // Handle shooting\n      if (keys[' '] && canShootRef.current) {\n        bulletsRef.current.push(player.shoot());\n        canShootRef.current = false;\n      }\n      if (!keys[' ']) {\n        canShootRef.current = true;\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw player\n      player.update(keys, canvas.width, canvas.height);\n      player.draw(context);\n\n      // Update and draw asteroids\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      // Update and draw bullets\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids\n      const playerPolygon = player.getPolygon();\n      asteroidsRef.current.forEach(asteroid => {\n        if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n          player.destroy();\n        }\n      });\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <>\n      {gameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}