{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const waveCountRef = useRef(8); // Start with 8 asteroids\n  const [gameOver, setGameOver] = useState(false);\n  const scoreRef = useRef(0);\n\n  // The old checkCollision function is no longer needed and can be removed.\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      }\n    });\n    playerRef.current = player;\n    const spawnAsteroids = count => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height\n          };\n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n    let animationFrameId;\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOver) {\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && canShootRef.current) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          canShootRef.current = false;\n        }\n        if (!keys[' ']) {\n          canShootRef.current = true;\n        }\n        // Update player\n        currentPlayer.update(keys, canvas.width, canvas.height);\n      }\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOver) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            setGameOver(true);\n          }\n        });\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOver && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '48px',\n        textAlign: 'center'\n      },\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"MrP0cC+jMybScL3lFjEoHM1VNU8=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Player","Asteroid","Debris","handleInput","checkPolygonCollision","checkCirclePolygonCollision","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","bulletsRef","asteroidsRef","debrisRef","playerRef","canShootRef","waveCountRef","gameOver","setGameOver","scoreRef","canvas","current","context","getContext","width","window","innerWidth","height","innerHeight","player","position","x","y","spawnAsteroids","count","safeRadius","i","asteroidPosition","isSafe","Math","random","dx","dy","distance","sqrt","push","animationFrameId","gameLoop","currentPlayer","keys","shoot","update","fillStyle","fillRect","font","textAlign","textBaseline","fillText","delete","draw","forEach","asteroid","bullet","d","getPolygon","hitPoints","hit","playerPolygon","concat","destroy","newAsteroids","radius","size","filter","b","a","length","requestAnimationFrame","cancelAnimationFrame","children","style","top","left","transform","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const playerRef = useRef(null);\n  const canShootRef = useRef(true);\n  const waveCountRef = useRef(8); // Start with 8 asteroids\n  const [gameOver, setGameOver] = useState(false);\n  const scoreRef = useRef(0);\n\n  // The old checkCollision function is no longer needed and can be removed.\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: canvas.width / 2, y: canvas.height / 2 },\n    });\n    playerRef.current = player;\n\n    const spawnAsteroids = (count) => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n          };\n  \n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n  \n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOver) {\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && canShootRef.current) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          canShootRef.current = false;\n        }\n        if (!keys[' ']) {\n          canShootRef.current = true;\n        }\n        // Update player\n        currentPlayer.update(keys, canvas.width, canvas.height);\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOver) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            setGameOver(true);\n          }\n        });\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOver && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <>\n      {gameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}