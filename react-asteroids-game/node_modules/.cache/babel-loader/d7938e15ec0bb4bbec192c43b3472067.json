{"ast":null,"code":"// Helper function to project a polygon onto an axis and return a min/max range.\nconst projectPolygon = (axis, polygon) => {\n  let min = Infinity;\n  let max = -Infinity;\n  for (const p of polygon) {\n    const dotProduct = p.x * axis.x + p.y * axis.y;\n    min = Math.min(min, dotProduct);\n    max = Math.max(max, dotProduct);\n  }\n  return {\n    min,\n    max\n  };\n};\n\n// Helper function to check if two 1D ranges overlap.\nconst overlap = (p1, p2) => {\n  return p1.max >= p2.min && p2.max >= p1.min;\n};\n\n// Main SAT collision detection function\nexport const checkPolygonCollision = (poly1, poly2) => {\n  const getAxes = polygon => {\n    const axes = [];\n    for (let i = 0; i < polygon.length; i++) {\n      const p1 = polygon[i];\n      const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n      const edge = {\n        x: p1.x - p2.x,\n        y: p1.y - p2.y\n      };\n      // Get the perpendicular vector (the normal)\n      const normal = {\n        x: -edge.y,\n        y: edge.x\n      };\n      axes.push(normal);\n    }\n    return axes;\n  };\n  const axes1 = getAxes(poly1);\n  const axes2 = getAxes(poly2);\n\n  // Loop over all axes\n  for (const axis of [...axes1, ...axes2]) {\n    const p1 = projectPolygon(axis, poly1);\n    const p2 = projectPolygon(axis, poly2);\n    // If there is no overlap on any axis, there is no collision\n    if (!overlap(p1, p2)) {\n      return false;\n    }\n  }\n\n  // If all axes have overlap, the polygons are colliding\n  return true;\n};\n\n// Circle-to-Polygon collision for bullets vs asteroids\nexport const checkCirclePolygonCollision = (circle, polygon) => {\n  const circleCenter = circle.position;\n\n  // Find the closest point on the polygon to the circle's center\n  let closestDistance = Infinity;\n  let closestPoint = null;\n  for (let i = 0; i < polygon.length; i++) {\n    const p1 = polygon[i];\n    const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const lenSq = dx * dx + dy * dy;\n    let t = ((circleCenter.x - p1.x) * dx + (circleCenter.y - p1.y) * dy) / lenSq;\n    t = Math.max(0, Math.min(1, t));\n    const closestX = p1.x + t * dx;\n    const closestY = p1.y + t * dy;\n    const distSq = (circleCenter.x - closestX) ** 2 + (circleCenter.y - closestY) ** 2;\n    if (distSq < closestDistance) {\n      closestDistance = distSq;\n      closestPoint = {\n        x: closestX,\n        y: closestY\n      };\n    }\n  }\n  const distance = Math.sqrt((circleCenter.x - closestPoint.x) ** 2 + (circleCenter.y - closestPoint.y) ** 2);\n  return distance < circle.radius;\n};","map":{"version":3,"names":["projectPolygon","axis","polygon","min","Infinity","max","p","dotProduct","x","y","Math","overlap","p1","p2","checkPolygonCollision","poly1","poly2","getAxes","axes","i","length","edge","normal","push","axes1","axes2","checkCirclePolygonCollision","circle","circleCenter","position","closestDistance","closestPoint","dx","dy","lenSq","t","closestX","closestY","distSq","distance","sqrt","radius"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/core/collision.js"],"sourcesContent":["// Helper function to project a polygon onto an axis and return a min/max range.\nconst projectPolygon = (axis, polygon) => {\n  let min = Infinity;\n  let max = -Infinity;\n  for (const p of polygon) {\n    const dotProduct = p.x * axis.x + p.y * axis.y;\n    min = Math.min(min, dotProduct);\n    max = Math.max(max, dotProduct);\n  }\n  return { min, max };\n};\n\n// Helper function to check if two 1D ranges overlap.\nconst overlap = (p1, p2) => {\n  return p1.max >= p2.min && p2.max >= p1.min;\n};\n\n// Main SAT collision detection function\nexport const checkPolygonCollision = (poly1, poly2) => {\n  const getAxes = (polygon) => {\n    const axes = [];\n    for (let i = 0; i < polygon.length; i++) {\n      const p1 = polygon[i];\n      const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n      const edge = { x: p1.x - p2.x, y: p1.y - p2.y };\n      // Get the perpendicular vector (the normal)\n      const normal = { x: -edge.y, y: edge.x };\n      axes.push(normal);\n    }\n    return axes;\n  };\n\n  const axes1 = getAxes(poly1);\n  const axes2 = getAxes(poly2);\n\n  // Loop over all axes\n  for (const axis of [...axes1, ...axes2]) {\n    const p1 = projectPolygon(axis, poly1);\n    const p2 = projectPolygon(axis, poly2);\n    // If there is no overlap on any axis, there is no collision\n    if (!overlap(p1, p2)) {\n      return false;\n    }\n  }\n\n  // If all axes have overlap, the polygons are colliding\n  return true;\n};\n\n// Circle-to-Polygon collision for bullets vs asteroids\nexport const checkCirclePolygonCollision = (circle, polygon) => {\n  const circleCenter = circle.position;\n\n  // Find the closest point on the polygon to the circle's center\n  let closestDistance = Infinity;\n  let closestPoint = null;\n\n  for (let i = 0; i < polygon.length; i++) {\n    const p1 = polygon[i];\n    const p2 = polygon[i + 1 === polygon.length ? 0 : i + 1];\n\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const lenSq = dx * dx + dy * dy;\n\n    let t = ((circleCenter.x - p1.x) * dx + (circleCenter.y - p1.y) * dy) / lenSq;\n    t = Math.max(0, Math.min(1, t));\n\n    const closestX = p1.x + t * dx;\n    const closestY = p1.y + t * dy;\n\n    const distSq = (circleCenter.x - closestX) ** 2 + (circleCenter.y - closestY) ** 2;\n\n    if (distSq < closestDistance) {\n      closestDistance = distSq;\n      closestPoint = { x: closestX, y: closestY };\n    }\n  }\n\n  const distance = Math.sqrt((circleCenter.x - closestPoint.x) ** 2 + (circleCenter.y - closestPoint.y) ** 2);\n  return distance < circle.radius;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}