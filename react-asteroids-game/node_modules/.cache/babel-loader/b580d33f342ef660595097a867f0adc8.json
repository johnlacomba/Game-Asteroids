{"ast":null,"code":"var _jsxFileName = \"/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport UFO from './UFO';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const ufoBulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const ufoRef = useRef(null);\n  const playerRef = useRef(null);\n  const shootCooldownRef = useRef(0);\n  const waveCountRef = useRef(8);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const gameOverRef = useRef(false);\n  const scoreRef = useRef(0);\n  const ufoSpawnTimerRef = useRef(0);\n  const UFO_SPAWN_TIME = 30 * 60; // 30 seconds at 60fps\n  const SHOOT_COOLDOWN = 15; // 60fps / 4 shots per second = 15 frames\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Initialize Player\n    const player = new Player({\n      position: {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      }\n    });\n    playerRef.current = player;\n    const spawnUFO = () => {\n      const side = Math.floor(Math.random() * 4);\n      let position, velocity;\n      const speed = 1.5;\n      switch (side) {\n        case 0:\n          // Top\n          position = {\n            x: Math.random() * canvas.width,\n            y: -50\n          };\n          velocity = {\n            x: Math.random() * 2 - 1,\n            y: speed\n          };\n          break;\n        case 1:\n          // Right\n          position = {\n            x: canvas.width + 50,\n            y: Math.random() * canvas.height\n          };\n          velocity = {\n            x: -speed,\n            y: Math.random() * 2 - 1\n          };\n          break;\n        case 2:\n          // Bottom\n          position = {\n            x: Math.random() * canvas.width,\n            y: canvas.height + 50\n          };\n          velocity = {\n            x: Math.random() * 2 - 1,\n            y: -speed\n          };\n          break;\n        case 3: // Left\n        default:\n          position = {\n            x: -50,\n            y: Math.random() * canvas.height\n          };\n          velocity = {\n            x: speed,\n            y: Math.random() * 2 - 1\n          };\n          break;\n      }\n      ufoRef.current = new UFO({\n        position,\n        velocity\n      });\n    };\n    const spawnAsteroids = count => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height\n          };\n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n    let animationFrameId;\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOverRef.current) {\n        if (shootCooldownRef.current > 0) {\n          shootCooldownRef.current--;\n        }\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && shootCooldownRef.current <= 0) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          shootCooldownRef.current = SHOOT_COOLDOWN;\n        }\n        // Update player\n        currentPlayer.update(keys, canvas.width, canvas.height);\n      }\n\n      // UFO Spawn Logic\n      if (!gameOverRef.current) {\n        ufoSpawnTimerRef.current++;\n        if (!ufoRef.current && ufoSpawnTimerRef.current > UFO_SPAWN_TIME) {\n          spawnUFO();\n          ufoSpawnTimerRef.current = 0;\n        }\n      }\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw UFO\n      if (ufoRef.current) {\n        const newUfoBullets = ufoRef.current.update(canvas.width, canvas.height, currentPlayer.position);\n        ufoBulletsRef.current.push(...newUfoBullets);\n        ufoRef.current.draw(context);\n        if (ufoRef.current.delete) {\n          ufoRef.current = null;\n        }\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n      ufoBulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      ufoBulletsRef.current.forEach(bullet => bullet.draw(context));\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Bullets with UFO\n      if (ufoRef.current) {\n        const ufoPolygon = ufoRef.current.getPolygon();\n        bulletsRef.current.forEach(bullet => {\n          if (!bullet.delete && checkCirclePolygonCollision(bullet, ufoPolygon)) {\n            bullet.delete = true;\n            ufoRef.current.destroy();\n            scoreRef.current += 500; // UFO is worth more points\n          }\n        });\n      }\n\n      // Collision Detection: UFO Bullets with Player\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        ufoBulletsRef.current.forEach(bullet => {\n          if (checkCirclePolygonCollision(bullet, playerPolygon)) {\n            bullet.delete = true;\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with UFO\n      if (!gameOverRef.current && ufoRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        const ufoPolygon = ufoRef.current.getPolygon();\n        if (checkPolygonCollision(playerPolygon, ufoPolygon)) {\n          debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n          gameOverRef.current = true;\n          setIsGameOver(true);\n          ufoRef.current.destroy(); // Also destroy the UFO\n        }\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: {\n              ...asteroid.position\n            },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      ufoBulletsRef.current = ufoBulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOverRef.current && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '48px',\n        textAlign: 'center'\n      },\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"l4fnTMmJ/LLAZYjHZG8sQux0C8Q=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Player","Asteroid","Debris","UFO","handleInput","checkPolygonCollision","checkCirclePolygonCollision","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","bulletsRef","ufoBulletsRef","asteroidsRef","debrisRef","ufoRef","playerRef","shootCooldownRef","waveCountRef","isGameOver","setIsGameOver","gameOverRef","scoreRef","ufoSpawnTimerRef","UFO_SPAWN_TIME","SHOOT_COOLDOWN","canvas","current","context","getContext","width","height","player","position","x","y","spawnUFO","side","Math","floor","random","velocity","speed","spawnAsteroids","count","safeRadius","i","asteroidPosition","isSafe","dx","dy","distance","sqrt","push","animationFrameId","gameLoop","currentPlayer","keys","shoot","update","fillStyle","fillRect","font","textAlign","textBaseline","fillText","delete","draw","newUfoBullets","forEach","asteroid","bullet","d","getPolygon","hitPoints","hit","ufoPolygon","destroy","playerPolygon","concat","newAsteroids","radius","size","filter","b","a","length","window","requestAnimationFrame","cancelAnimationFrame","children","style","top","left","transform","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/jlacomba/Game-Asteroids/react-asteroids-game/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Player from './Player';\nimport Asteroid from './Asteroid';\nimport Debris from './Debris';\nimport UFO from './UFO';\nimport { handleInput } from '../core/inputController';\nimport { checkPolygonCollision, checkCirclePolygonCollision } from '../core/collision';\n\nconst Game = () => {\n  const canvasRef = useRef(null);\n  const bulletsRef = useRef([]);\n  const ufoBulletsRef = useRef([]);\n  const asteroidsRef = useRef([]);\n  const debrisRef = useRef([]);\n  const ufoRef = useRef(null);\n  const playerRef = useRef(null);\n  const shootCooldownRef = useRef(0);\n  const waveCountRef = useRef(8);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const gameOverRef = useRef(false);\n  const scoreRef = useRef(0);\n  const ufoSpawnTimerRef = useRef(0);\n  const UFO_SPAWN_TIME = 30 * 60; // 30 seconds at 60fps\n  const SHOOT_COOLDOWN = 15; // 60fps / 4 shots per second = 15 frames\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Initialize Player\n    const player = new Player({\n      position: { x: canvas.width / 2, y: canvas.height / 2 },\n    });\n    playerRef.current = player;\n\n    const spawnUFO = () => {\n      const side = Math.floor(Math.random() * 4);\n      let position, velocity;\n      const speed = 1.5;\n\n      switch (side) {\n        case 0: // Top\n          position = { x: Math.random() * canvas.width, y: -50 };\n          velocity = { x: Math.random() * 2 - 1, y: speed };\n          break;\n        case 1: // Right\n          position = { x: canvas.width + 50, y: Math.random() * canvas.height };\n          velocity = { x: -speed, y: Math.random() * 2 - 1 };\n          break;\n        case 2: // Bottom\n          position = { x: Math.random() * canvas.width, y: canvas.height + 50 };\n          velocity = { x: Math.random() * 2 - 1, y: -speed };\n          break;\n        case 3: // Left\n        default:\n          position = { x: -50, y: Math.random() * canvas.height };\n          velocity = { x: speed, y: Math.random() * 2 - 1 };\n          break;\n      }\n      ufoRef.current = new UFO({ position, velocity });\n    };\n\n    const spawnAsteroids = (count) => {\n      const safeRadius = 200; // The radius around the player where asteroids won't spawn\n      for (let i = 0; i < count; i++) {\n        let asteroidPosition;\n        let isSafe = false;\n        while (!isSafe) {\n          asteroidPosition = {\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n          };\n  \n          const dx = asteroidPosition.x - player.position.x;\n          const dy = asteroidPosition.y - player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n  \n          if (distance > safeRadius) {\n            isSafe = true;\n          }\n        }\n        asteroidsRef.current.push(new Asteroid({\n          position: asteroidPosition\n        }));\n      }\n    };\n\n    // Initial spawn\n    spawnAsteroids(waveCountRef.current);\n\n    let animationFrameId;\n\n    const gameLoop = () => {\n      const currentPlayer = playerRef.current;\n\n      // Only handle player input if the game is not over\n      if (!gameOverRef.current) {\n        if (shootCooldownRef.current > 0) {\n          shootCooldownRef.current--;\n        }\n        const keys = handleInput();\n        // Handle shooting\n        if (keys[' '] && shootCooldownRef.current <= 0) {\n          bulletsRef.current.push(currentPlayer.shoot());\n          shootCooldownRef.current = SHOOT_COOLDOWN;\n        }\n        // Update player\n        currentPlayer.update(keys, canvas.width, canvas.height);\n      }\n\n      // UFO Spawn Logic\n      if (!gameOverRef.current) {\n        ufoSpawnTimerRef.current++;\n        if (!ufoRef.current && ufoSpawnTimerRef.current > UFO_SPAWN_TIME) {\n          spawnUFO();\n          ufoSpawnTimerRef.current = 0;\n        }\n      }\n\n      context.fillStyle = 'black';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw Score\n      context.fillStyle = 'white';\n      context.font = '24px Arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'top';\n      context.fillText(`Score: ${scoreRef.current}`, 20, 20);\n\n      // Draw player if it has not been destroyed\n      if (!currentPlayer.delete) {\n        currentPlayer.draw(context);\n      }\n\n      // Update and draw UFO\n      if (ufoRef.current) {\n        const newUfoBullets = ufoRef.current.update(canvas.width, canvas.height, currentPlayer.position);\n        ufoBulletsRef.current.push(...newUfoBullets);\n\n        ufoRef.current.draw(context);\n        if (ufoRef.current.delete) {\n          ufoRef.current = null;\n        }\n      }\n\n      // Update and draw asteroids, bullets, and debris\n      asteroidsRef.current.forEach(asteroid => asteroid.update(canvas.width, canvas.height));\n      asteroidsRef.current.forEach(asteroid => asteroid.draw(context));\n\n      bulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      bulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      ufoBulletsRef.current.forEach(bullet => bullet.update(canvas.width, canvas.height));\n      ufoBulletsRef.current.forEach(bullet => bullet.draw(context));\n\n      debrisRef.current.forEach(d => d.update());\n      debrisRef.current.forEach(d => d.draw(context));\n\n      // Collision Detection: Bullets with Asteroids\n      bulletsRef.current.forEach(bullet => {\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkCirclePolygonCollision(bullet, asteroid.getPolygon())) {\n            bullet.delete = true;\n            if (asteroid.hitPoints - 1 <= 0) {\n              scoreRef.current += 100;\n            }\n            asteroid.hit();\n          }\n        });\n      });\n\n      // Collision Detection: Bullets with UFO\n      if (ufoRef.current) {\n        const ufoPolygon = ufoRef.current.getPolygon();\n        bulletsRef.current.forEach(bullet => {\n          if (!bullet.delete && checkCirclePolygonCollision(bullet, ufoPolygon)) {\n            bullet.delete = true;\n            ufoRef.current.destroy();\n            scoreRef.current += 500; // UFO is worth more points\n          }\n        });\n      }\n\n      // Collision Detection: UFO Bullets with Player\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        ufoBulletsRef.current.forEach(bullet => {\n          if (checkCirclePolygonCollision(bullet, playerPolygon)) {\n            bullet.delete = true;\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with Asteroids (only if game not over)\n      if (!gameOverRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        asteroidsRef.current.forEach(asteroid => {\n          if (checkPolygonCollision(playerPolygon, asteroid.getPolygon())) {\n            debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n            gameOverRef.current = true;\n            setIsGameOver(true);\n          }\n        });\n      }\n\n      // Collision Detection: Player with UFO\n      if (!gameOverRef.current && ufoRef.current) {\n        const playerPolygon = currentPlayer.getPolygon();\n        const ufoPolygon = ufoRef.current.getPolygon();\n        if (checkPolygonCollision(playerPolygon, ufoPolygon)) {\n          debrisRef.current = debrisRef.current.concat(currentPlayer.destroy());\n          gameOverRef.current = true;\n          setIsGameOver(true);\n          ufoRef.current.destroy(); // Also destroy the UFO\n        }\n      }\n\n      // Handle asteroid splitting\n      const newAsteroids = [];\n      asteroidsRef.current.forEach(asteroid => {\n        // Check if a large asteroid is destroyed\n        if (asteroid.delete && asteroid.radius >= 50) {\n          // Split into two smaller asteroids\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n          newAsteroids.push(new Asteroid({\n            position: { ...asteroid.position },\n            size: asteroid.radius / 2\n          }));\n        }\n      });\n\n      // Remove deleted items and add new ones\n      bulletsRef.current = bulletsRef.current.filter(b => !b.delete);\n      ufoBulletsRef.current = ufoBulletsRef.current.filter(b => !b.delete);\n      debrisRef.current = debrisRef.current.filter(d => !d.delete);\n      asteroidsRef.current = asteroidsRef.current.filter(a => !a.delete).concat(newAsteroids);\n\n      // Check for next wave (only if game not over)\n      if (!gameOverRef.current && asteroidsRef.current.length === 0) {\n        waveCountRef.current++;\n        spawnAsteroids(waveCountRef.current);\n      }\n\n      animationFrameId = window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <>\n      {isGameOver && (\n        <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'white', fontSize: '48px', textAlign: 'center' }}>\n          GAME OVER\n        </div>\n      )}\n      <canvas ref={canvasRef} />\n    </>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}